var subjects = new ActiveXObject("Scripting.Dictionary");
var answers = new ActiveXObject("Scripting.Dictionary");


subjects.Add("JAVA", [
"    Write a Java program to find out the number of times each element is repeated in an array.",
"Write a Java program for constructor overloading.",
"Write a Java program for method overloading.",
"Write a Java Program to find the area and perimeter of rectangle",
"Write a Java program to illustrate this keyword",
"Write a Java program to illustrate static variables",
"Write a Java Program to illustrate static methods in Java.",
"Write a Java program to illustrate static block.",
"Write a Java program to illustrate use of command line arguments.",
"Write a Java program to illustrate methods of String class.",
"Write a Java program to illustrate methods of StringBuffer class.",
"Write a Java Program to check whether a string is palindrome or not.",
"Write a Java program to utilise the usage of StringTokenizer.",
"Write a Java program to illustrate single level inheritance.",
"Write a Java program to illustrate multilevel inheritance.",
"Write a Java program to illustrate the use of super.",
"Write a Java program to illustrate order of constructor call.",
"Write a Java program for dynamic method dispatch.",
"Write a Java program to illustrate interfaces.",
"Write a Java program to illustrate multiple inheritance",
"Write a Java program to illustrate abstract class",
"Write a Java program to illustrate runtime polymorphism",
"Write a Java program to illustrate dynamic method resolution",
"Write a Java program to illustrate use of final.",
"Write a Java program to illustrate exception handling.",
"Write a Java program to illustrate multiple exceptions",
"Write a Java program to implement Nested try.",
"Write a Java Program for throwing an exception.",
"Write a Java program to demonstrate custom exception",
"Write a Java Program for implementing packages.",
"Write a Java Program for importing packages.",
"Write a Java program to implement thread.",
"Write a Java program to illustrate thread extension.",
"Write a Java program to implement multiple threads.",
"Write a Java program to implement join function.",
"Write a Java program to illustrate thread priorities.",
"Write a Java program to illustrate the implementation of Synchronization  in Java using Synchronization block (Show the drawback with a program Without Synchronization)",
"Write a Java  program to illustrate the implementation of Synchronization  in Java using Synchronization method (Show the drawback with a program Without Synchronization)",
"Write a Java program to illustrate Producer consumer problem and also code for solving the issue.",
"Write a Java program to demonstrate working of an Applet.",
"Write a Java program to demonstrate working of Frame.",
"Write a Java program to demonstrate mouse events",
"Write a Java program to demonstrate Keyboard events",
"Write a Java program to demonstrate Swings in java",
"Write a Java program to create a Swing to calculate factorial of a given number.",
"Write a Java program to demonstrate Borderlayout demo",
"Write a Java program to demonstrate Grid layout demo",
"Write a Java program to demonstrate Jcheckbox demo",
"Write a Java program to demonstrate FileInputStream ",
"Write a Java program to demonstrate DatainputStream for input",
"Write a Java program to demonstrate FileoutputStream.",
"Write a Java program to demonstrate copy contents from one file to another.",
"Write a Java program to demonstrate Buffer reader."
]);

var JAVAanswers = [
    //1
    "\nimport java.util.*;\npublic class Occurence {\n\tpublic static void main(String args[])\n\t{\n\t\tScanner s=new Scanner(System.in);\n\t\tint n,i,j,count=1,visited=-1;\n\t\tSystem.out.println(\"Enter the number of elements in array\");\n\t\tn=s.nextInt();\n\t\tint a[]= new int[n];\n\t\tSystem.out.println(\"Enter the elements of array\");\n\t\tfor(i=0;i<n;i++)\n\t\t{\n\t\t\ta[i]=s.nextInt();\n\t\t}\n\t\tint f[]= new int[n];\n\t\tfor(i=0;i<n;i++)\n\t\t{\n\t\t\tcount=1;\n\t\t\tfor(j=i+1;j<n;j++)\n\t\t\t{\n\t\t\t\tif(a[i]==a[j])\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t\tf[j]=visited;\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t}\n\t\t\tif(f[i]!=visited)\n\t\t\t{\n\t\t\t\tf[i]=count;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Element | Frequency\");\n\t\tfor(i=0;i<n;i++)\n\t\t{\n\t\t\tif(f[i]!=visited)\n\t\t\t{\n\t\t\tSystem.out.println(\"  \"+a[i]+\"  \"+f[i]);\n\t\t\t}\n\t\t}\n\t\t\t\n\t\t\n\t}\n}\n",
    //2
    "\nimport java.util.*;\nclass Rect\n{\n\tfloat len,br,area,peri;\n  Rect()\n  {\n\t   len=23;br=32;\n  }\n  Rect(float l,float b)\n  {\n\t   len=l;br=b;\n  }\n  void calcpar()\n  {\n\t   area=len*br;\n\t   peri=2*(len+br);\n  }\n  void dislay()\n  {\n\t   System.out.println(\"Length: \"+len+\" Breadth: \"+br);\n\t   System.out.println(\"Area= \"+area+\" Perimeter= \"+peri);\n\t\t\t  \n  }\n}\npublic class COvl {\n\tpublic static void main(String args[])\n\t{\n\t\tRect r1=new Rect();\n\t\tr1.calcpar();\n\t\tr1.dislay();\n\t\tRect r2=new Rect(36.5f,27.2f);\n\t\tr2.calcpar();\n\t\tr2.dislay();\n\t\t\n\t}\n}\n\n",
    //3
    "\n\n\nclass Rect1\n{\n\tfloat len,br,area,peri;\n  Rect1()\n  {\n\t   len=23;br=32;\n  }\n  Rect1(float l,float b)\n  {\n\t   len=l;br=b;\n  }\n  void calcpar()\n  {\n\t   area=len*br;\n\t   peri=2*(len+br);\n  }\n  void calcpar(float len,float br)\n  {\n\t   area=len*br;\n\t   peri=2*(len+br);\n  }\n  void display()\n  {\n\t   System.out.println(\"Length: \"+len+\" Breadth: \"+br);\n\t   System.out.println(\"Area= \"+area+\" Perimeter= \"+peri);\n\t\t\t  \n  }\n}\npublic class MethOvl {\n\tpublic static void main(String args[])\n\t{\n\t\tRect1 r1=new Rect1();\n\t\tr1.calcpar();\n\t\tr1.display();\n\t\tRect1 r2=new Rect1();\n\t\tr2.calcpar(36.5f,27.2f);\n\t\tr2.display();\n\t\t\n\t}\n\t\n}\n",
    //4
    "\npackage java_files;\nimport java.util.*;\nclass Rect2\n{\n\tfloat len,br,area,peri;\n\t   Rect2()\n\t   {\n\t\t   len=23;br=32;\n\t   }\n\t   void calcpar()\n\t   {\n\t\t   area=len*br;\n\t\t   peri=2*(len+br);\n\t   }\n\t   void display()\n\t   {\n\t\t   System.out.println(\"Length: \"+len+\" Breadth: \"+br);\n\t\t   System.out.println(\"Area= \"+area+\" Perimeter= \"+peri);\n\t\t\t\t  \n\t   }\n}\npublic class Areaperi {\n\tpublic static void main(String args[])\n\t{\n\t\tRect2 r1=new Rect2();\n\t\tr1.calcpar();\n\t\tr1.display();\n\t}\t\n}\n",
    //5
    "\n\n\nclass Rect3\n{\n\tfloat len,br,area,peri;\n  Rect3()\n  {\n\t   len=23;br=32;\n  }\n  Rect3(float l,float b)\n  {\n\t   this.len=l;\n\t   this.br=b;\n  }\n  void calcpar()\n  {\n\t   area=len*br;\n\t   peri=2*(len+br);\n  }\n  void display()\n  {\n\t   System.out.println(\"Length: \"+len+\" Breadth: \"+br);\n\t   System.out.println(\"Area= \"+area+\" Perimeter= \"+peri);\n\t\t\t  \n  }\n}\npublic class This {\n\tpublic static void main(String args[])\n\t{\n\tRect3 r1=new Rect3();\n\tr1.calcpar();\n\tr1.display();\n\t}\n}\n\n\n",
    //6
    "\n\n\nclass FixedDep\n{\nfloat prin,amount;\nint time;\nstatic float rate;\nstatic int objcnt;\nFixedDep()\n{\n\t prin=2000;\n\t time=2;\n\t rate=4.5f;\n}\nFixedDep(float pr,int ti)\n{\n\t prin=pr;\n\t ti=time;\n}\nvoid calcSI()\n{\n\t amount=prin+(prin+time*rate)/100;\n}\nvoid display()\n{\n\t System.out.println(\"Amount:\"+amount);\n\t System.out.println(\"object count :\"+objcnt);\n\t System.out.println(\"rate of interest :\"+rate);\n}\n}\npublic class Static {\n\tpublic static void main(String args[])\n\t{\n\t\tFixedDep d1= new FixedDep();\n\t\td1.calcSI();\n\t\td1.display();\n\t\tFixedDep d2= new FixedDep(3200.0f,3);\n       FixedDep.rate=6.5f;\n\t\td2.calcSI();\n\t\td2.display();\n\t\t\n\t}\n}\n",
    //7
    "\n\n\nclass FixedDep1\n{\nfloat prin,amount;\nint time;\nstatic float rate;\nstatic int objcnt;\nFixedDep1()\n{\n\t prin=2000;\n\t time=2;\n\t rate=4.5f;\n}\nFixedDep1(float pr,int ti)\n{\n\t prin=pr;\n\t ti=time;\n}\nvoid calcSI()\n{\n\t amount=prin+(prin*time*rate)/100;\n}\nstatic void Setrate(float r)\n{\n\t rate=r;\n}\nvoid display()\n{\n\t System.out.println(\"Amount:\"+amount);\n\t System.out.println(\"object count :\"+objcnt);\n\t System.out.println(\"rate of interest :\"+rate);\n}\n}\npublic class StaticMeth {\n\tpublic static void main(String args[])\n\t{\n\t  \tFixedDep1 d1=new FixedDep1();\n\t  \td1.calcSI();\n\t  \td1.display();\n\t  \tFixedDep1 d2=new FixedDep1(2354,4);\n\t  \tFixedDep1.Setrate(6.6f);\n\t  \td2.calcSI();\n\t  \td2.display();\n\t}\n}\n",
    //8
    "\n\n\nclass StatBlo\n{\n static int objcnt;\n int num;\n StatBlo()\n {\n\t  num=5;\n\t  objcnt++;\n }\n void display()\n {\n\t  System.out.println(\"Object Count = \"+objcnt+\" Num=\"+num);\n }\n static\n {\n\t  objcnt=5;\n\t  System.out.println(\"In static block of Static Block class\");\n\t  displayObjcnt();\n }\n static void displayObjcnt()\n {\n\t  System.out.println(\"Object Count:\"+objcnt);\n }\n }\npublic class StaticBlock {\n\tpublic static void main(String args[])\n\t{\n\t\tStatBlo.objcnt=10;\n\t\tStatBlo.displayObjcnt();\n\t\tStatBlo s1= new StatBlo();\n\t\ts1.display();\n\t}\n\tstatic\n\t  {\n\t\t\n\t\t  System.out.println(\"In static block of Main class\");\n\t  }\n}\n",
    //9
    "\n\n\npublic class CommLineArg {\n\tpublic static void main(String args[])\n\t{\n\t\tint a[]=new int[args.length];\n\t\tfor(int i=0;i<args.length;i++)\n\t\t{\n\t\t\ta[i]=Integer.parseInt(args[i]);\n\t\t\tSystem.out.println(a[i]);\n\t\t}\n\t}\n}\n",
    //10
    "\n\n\nimport java.util.*;\npublic class String1 {\n\tpublic static void main(String args[])\n\t{\n\t  Scanner s = new Scanner(System.in);\n\t  String str,str1,a,b;\n\t  System.out.println(\"Enter a String\");\n\t  str=s.nextLine();\n\t  System.out.println(\"Length of the string: \"+str.length());\n\t  System.out.println(\"Bytes of the string : \"+str.getBytes());\n\t  System.out.println(\"The character at 2 is : \"+str.charAt(2));\n\t  System.out.println(\"Enter an other String\");\n\t  str1=s.nextLine();\n\t  System.out.println(\"First String equals Second String \"+str.equals(str1));\n\t  System.out.println(\"Enter 2 Strings for Pattern Matching\");\n\t  a=s.nextLine();\n\t  b=s.nextLine();\n\t  System.out.println(\"performing Region Matching\");\n\t  System.out.println(\"String 1 region matches found at \"+a.regionMatches(5,b,0,b.length()));\n\t  System.out.println(\"Converting First String to character Array\");\n\t  char ch[]=str.toCharArray();\n\t  for(int i=0;i<str.length();i++)\n\t  {\n\t\t  System.out.println(ch[i]);\n\t  }\n\t\t\n\t}\n}\n",
    //11
    "\n\n\nimport java.util.*;\nimport java.lang.StringBuffer;\npublic class stringbuffer1 {\n\tpublic static void main(String args[])\n\t{\n\t\tStringBuffer str = new StringBuffer(\"Hello\");\n\t\tstr.append(\"World\");\n\t\tSystem.out.println(\"Appendeed: \"+str);\n\t\tstr.insert(0,\"Java\");\n\t\tSystem.out.println(\"Inserted java \"+str);\n\t\tstr.replace(0, 4, \"Hi\");\n\t\tSystem.out.println(\"Replaced java with hi \"+str);\n\t\tstr.delete(0, 2);\n\t\tSystem.out.println(\"Deleted hi \"+str);\n\t\tSystem.out.println(\"Length of the String \"+str.length());\n\t\tSystem.out.println(\"capacity of string \"+str.capacity());\n\t\tstr.setLength(8);\n\t\tSystem.out.println(\"New string set length to 8 \"+str);\n\t\tSystem.out.println(\"Sub String of the string is \"+str.substring(0,4));\n\t\tstr.setLength(0);\t\t\n\t}\n}\n",
    //12
    "\n\n\nimport java.util.*;\nimport java.lang.StringBuffer;\npublic class palindrome {\n\tpublic static void main(String args[])\n\t{\n\t\tScanner s=new Scanner(System.in);\n\t\tSystem.out.println(\"Enter a String\");\n\t\tString str=s.nextLine();\n\t\tStringBuffer rev = new StringBuffer(str);\n\t\trev.reverse();\n\t\tif(str.equals(rev.toString()))\n\t\t{\n\t\t\tSystem.out.println(str+\" is a Palindrome\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSystem.out.println(str+\" is not a Palindrome\");\n\t\t}\n\t\t\n\t\t\n\t}\n}\n\n\n\n\n\n\n\n\n",
    //13
    "\n\n\nimport java.util.*;\nimport java.util.StringTokenizer;\npublic class StringTok {\n\tpublic static void main(String args[])\n\t{\n\t\tString ints;\n\t\tint sum=0;\n\t\tScanner s =new Scanner(System.in);\n\t\tSystem.out.println(\"Enter a String of Integers:\");\n\t\tints=s.nextLine();\n\t\tString str;\n\t\tStringTokenizer tok=new StringTokenizer(ints);\n\t\twhile(tok.hasMoreTokens())\n\t\t{\n\t\t\tstr=tok.nextToken();\n\t\t\tsum=sum+Integer.parseInt(str);\n\t\t\t\n\t\t}\n\t\tSystem.out.println(\"The sum of the integers are:\"+sum);\n\t}\n}\n",
    //14
    "\nclass Square\n{\n float side,area;\n Square()\n {\n\t  side=4.2f;\n }\n Square(float s)\n {\n\t  side=s;\n }\n void display()\n {\n\t  area=side*side;\n\t  System.out.println(\"Side :\"+side+\" Area :\"+area);\n }\n}\nclass Cube extends Square\n{\n float side,vol;\n Cube()\n {\n\t  side=4.2f;\n }\n Cube(float s)\n {\n\t  side=s;\n }\n void Cdisplay()\n {\n\t  display();\n\t  vol=side*side*side;\n\t  System.out.println(\"Volume :\"+vol);\n }\n}\npublic class SingleInh {\n\tpublic static void main(String args[])\n\t{\n\t\tSquare s1=new Square();\n\t\ts1.display();\n\t\tCube c1= new Cube();\n\t\tc1.Cdisplay();\n\t}\n}\n\n\n\n\n ",
    //15
    "\nimport static java.lang.System.out;\nclass Square\n{\n\tfloat l;\n\tfloat area;\n\tSquare()\n\t{\n\t\tl=3;\n\t}\n\tSquare(float l)\n\t{\n\t\tthis.l=l;\n\t}\n\tvoid display()\n\t{\n\tarea=l*l;\n\tSystem.out.println(\"l=\"+l+\"area=\"+area);\n\t}\n}\nclass Cube extends Square\n{\n\tfloat vol;\n\tCube()\n\t{\n\tl=5;\n\t}\n\tCube(float f)\n\t{\n\tl=f;\n\t}\n\tvoid cdisplay()\n\t{\n\tdisplay();\n\tvol=area*l;\n\tSystem.out.println(\"volume=\"+vol);\n\t}\n}\nclass ColorCube extends Cube\n{\n\tString col;\n\tColorCube()\n\t{\n\t\tcol=\"Blue\";\n\t}\n\tColorCube(String c)\n\t{\n\t\tcol=c;\n\t}\n\tvoid ccdisplay()\n\t{\n\tcdisplay();\n\tSystem.out.println(\"color=\"+col);\n\t}\n}\n\t\n\t\nclass MultiLevelInhen\n{\n\tpublic static void main(String args[])\n\t{\n\t\tSquare sob=new Square();\n\t\tsob.display();\n\t\tCube cob=new Cube(5.6f);\n\t\tcob.cdisplay();\n\t\tColorCube ccob=new ColorCube();\n\t\tccob.ccdisplay();\n\t}\n}\n\n",
    //16
    "\nclass Rect\n{\n\tfloat l,b;\n\tfloat area;\n\tint num =58;\n\tRect()\n\t{\n\t\tl=5;\n        b=3;\n\t}\n\tRect(float len,float br)\n\t{\n\t\tl=len;\n\t\tb=br;\n\t}\n\tvoid display()\n\t{\n\tarea=l*b;\n\tSystem.out.println(\"num=\"+num);\n\tSystem.out.println(\"l=\"+l+\"br=\"+b+\"area=\"+area);\n\t}\n}\nclass Cuboid extends Rect\n{\n\tfloat h,vol;\n\tint num=68;\n\tCuboid()\n\t{\n\tsuper();\n\th=10.0f;\n\t}\n\tCuboid(int len,int br,int ht)\n\t{\n\tsuper(len,br);\n\th=ht;\n\t}\n\tvoid cdisplay()\n\t{\n\tvol=area*l;\n\tsuper.display();\n\tvol=area*l;\n\tSystem.out.println(\"volume=\"+vol);\n\tSystem.out.println(\"num=\"+super.num);\n\t}\n}\nclass ColorCuboid extends Cuboid\n{\n\tString col;\n\tint num=98;\n\tColorCuboid()\n\t{\n\t\tsuper(10,12,18);\n\t\tcol=\"Blue\";\n\t}\n\tColorCuboid(int len,int br,int ht,String c)\n\t{\n\t\tsuper(len,br,ht);\n\t\tcol=c;\n\t}\n\tvoid ccdisplay()\n\t{\n\tsuper.display();\n\t{\n\tsuper.cdisplay();\n\tSystem.out.println(\"color=\"+col);\n\t}\n}\n}\n\t\n\t\nclass SuperKeyword\n{\n\tpublic static void main(String args[])\n\t{\n\t\tRect sob=new Rect();\n\t\tsob.display();\n\t\tCuboid cob=new Cuboid();\n\t\tcob.cdisplay();\n\t\tColorCuboid ccob=new ColorCuboid();\n\t\tccob.ccdisplay();\n\t}\n}\n",
    //17
    "\nclass Square\n{\n\tfloat l;\n\tfloat area;\n\tSquare()\n\t{\n\t\tl=3;\n\t\tSystem.out.println(\"In square parameterless\");\n\t}\n\tSquare(float l)\n\t{\n\t\tthis.l=l;\n\t\tSystem.out.println(\"In square parameterised\");\n\t}\n\tvoid display()\n\t{\n\tarea=l*l;\n\tSystem.out.println(\"l=\"+l+\"area=\"+area);\n\t}\n}\nclass Cube extends Square\n{\n\tfloat vol;\n\tCube()\n\t{\n\tl=5;\n\tSystem.out.println(\"In cube parameterless\");\n\t}\n\tCube(float f)\n\t{\n\tl=f;\n\tSystem.out.println(\"In cube parameterised\");\n\t}\n\tvoid cdisplay()\n\t{\n\tdisplay();\n\tvol=area*l;\n\tSystem.out.println(\"volume=\"+vol);\n\t}\n}\nclass ColorCube extends Cube\n{\n\tString col;\n\tColorCube()\n\t{\n\t\tcol=\"Blue\";\n\t\tSystem.out.println(\"In ColorCube parameterless\");\n\t}\n\tColorCube(String c)\n\t{\n\t\tcol=c;\n\t\tSystem.out.println(\"In ColorCube parameterised\");\n\t}\n\tvoid ccdisplay()\n\t{\n\tcdisplay();\n\tSystem.out.println(\"color=\"+col);\n\t}\n}\n\t\n\nclass ConstructorCalls\n{\n\tpublic static void main(String args[])\n\t{\n\t\tSquare sob=new Square();\n\t\tsob.display();\n\t\tCube cob=new Cube(5.6f);\n\t\tcob.cdisplay();\n\t\tColorCube ccob=new ColorCube();\n\t\tccob.ccdisplay();\n\t}\n}\n\n",
    //18
    "\nclass Triangle\n{\nfloat b,h ,area;\nTriangle()\n{\nb=5;\nh=10;\n}\nTriangle(Float br,Float ht)\n{\nbr=b;\nht=h;\n}\nvoid display()\n{\narea=(float)0.5*b*h;\n}\n}\nclass Prism extends Triangle\n{\n    float vol;\n    Prism()\n    {\n        super();\n    }\n    Prism(float br,float ht)\n    {\n        br=b;\n        ht=h;\n    }\n    void display()\n    {\n        super.display();\n        vol=area*b*h;\n    }\n}\nclass Cprism extends Prism\n{\n    String col;\n    Cprism()\n    {\n        super();\n        col=\"BLUE\";\n    }\n    Cprism(String c)\n    {\n    super(10.0f,7.0f);\n    col=c;\n    }\n    void display()\n    {\n    super.display();\n    System.out.println(\"col=\"+col);\n    }\n}\nclass Dynamicmethdispatch\n{\npublic static void main(String a[])\n    {\n        Triangle tob=new Triangle();\n        tob.display();\n        Triangle pob=new Prism();\n        pob.display();\n        Triangle cob=new Cprism();\n        cob.display();\n        Triangle tref;\n        tref=tob;\n        tref.display();\n        tref=pob;\n        tref.display();\n        tref=cob;\n        tref.display();\n    }\n}\n",
    //19
    "\nimport java.util.Scanner;\n\ninterface InputOutput\n{\n    void read();\n    void display();\n    Float pi=3.14f;\n}\nclass Complex implements InputOutput\n{\nint real,img;\n    Complex()\n        {\n            real=5;\n            img=7;\n        }\n        public void read()\n        {\n            Scanner s=new Scanner(System.in);\n            real=s.nextInt();\n            img=s.nextInt();\n        }\n        public void display()\n        {\n            System.out.println(\"complex:\"+real+\"i\"+img);\n        }\n    }\nclass Circle implements InputOutput\n{\n    int rad;\n    float area;\n    Circle()\n    {\n        rad=3;\n    }\n    public void read()\n    {\n        Scanner r=new Scanner(System.in);\n        rad=r.nextInt();\n    }\n    void calcArea()\n    {\n        area=pi*rad*rad;\n    }\n    public void display()\n    {\n        System.out.println(\"rad=\"+rad+\"area=\"+area);\n    }\nclass Interfaceeg{\npublic static void main(String a[])\n    {\n        Complex c1=new Complex();\n        c1.read();\n        c1.display();\n        Circle cob=new Circle();\n        cob.read();\n        cob.calcArea();\n        cob.display();\n    }\n}\n}\n",
    //20
    "\n\nimport java.util.Scanner;\n\ninterface InputOutput\n{\n  void read();\n  void display();\n}\ninterface ShapesCalc\n{\n\t void CalcArea();\n\t void CalcPeri();\n     float pi=3.1412f;\n}\n class Complex implements InputOutput\n{\n\tint real,img;\n\tComplex()\n\t{\n\t\treal=5;img=7;\n\t}\n\tpublic void read()\n\t{\n\t\tScanner s=new Scanner(System.in);\n\t\treal=s.nextInt();\n\t\timg=s.nextInt();\n\t}\n\tpublic void display()\n\t{\n\t\tSystem.out.println(\"Complex= \"+real+\"+i\"+img);\n\t}\n}\nclass Circle implements InputOutput,ShapesCalc\n{\n  int rad;float area;\n  Circle()\n  {\n\t  rad=3;\n  }\n  public void read()\n\t{\n\t\tScanner s=new Scanner(System.in);\n\t\trad=s.nextInt();\n\t}\n  public void CalcArea()\n  {\n\t  area=pi*rad*rad;\n  }\n  public void CalcPeri()\n  {\n\t  System.out.println(\"Perimeter :\"+(2*pi*rad));\n  }\n  public void display()\n  {\n\t  System.out.println(\"Radius : \"+rad+\" Area : \"+area);\n  }\n    \n}\npublic class MultiInhInterface {\n\tpublic static void main(String args[])\n\t{\n\t\tComplex c1=new Complex();\n\t\tc1.display();\n\t\tCircle c2= new Circle();\n\t\tc2.CalcArea();\n\t\tc2.CalcPeri();\n\t\tc2.display();\n\t}\n\n}\n",
    //21
    "\nabstract class Shape\n{\n int dim1;\n Shape()\n {\n\t dim1=10;\n }\n abstract void calcArea();\n void display()\n {\n\t System.out.println(\"Dimension 1= \"+dim1);\n }\n}\nclass Square21 extends Shape\n{\n\tint area;\n    Square21()\n    {\n    \t\n    }\n    Square21(int s)\n    {\n    \tdim1=s;\n    }\n    void calcArea()\n    {\n    \tarea=dim1*dim1;\n    }\n    void display()\n    {\n   \t System.out.println(\"In Square dim1= \"+dim1);\n   \tSystem.out.println(\"Area= \"+area);\n    }\n}\npublic class AbstractClassEg {\n\tpublic static void main(String args[])\n\t{\n\t\tSquare21 sob= new Square21();\n\t\tsob.calcArea();\n\t\tsob.display();\n\t\tShape s=sob;\n\t\ts.display();\n\t\ts.calcArea();\n\t\t\n\t}\n\n}\n",
    //22
    "\n22.abstract class Shape1\n{\n\tint dim1;\n\tShape1()\n\t{\n\t\tdim1=10;\n\t\t\n\t}\n\tabstract void calcArea();\n\t void display()\n\t {\n\t\t System.out.println(\"Dimension 1= \"+dim1);\n\t }\n}\nclass Sqr extends Shape1\n{\n\tint area;\n\tSqr()\n\t{\n\t\t\n\t}\n\tSqr(int l)\n\t{\n\t\tdim1=l;\n\t}\n\t void calcArea()\n\t {\n\t\t area=dim1*dim1;\n\t }\n\t void display()\n\t    {\n\t   \t System.out.println(\"In Square dim1= \"+dim1);\n\t   \tSystem.out.println(\"Area= \"+area);\n\t    }\n}\nclass rect extends Sqr\n{\n\tint dim2;\n\trect()\n\t{\n\t\tdim2=25;\n\t}\n\trect(int l,int b)\n\t{\n\t\tsuper();\n\t\tdim2=b;\n\t}\n\tvoid calcArea()\n\t {\n\t\t area=dim1*dim2;\n\t }\n\tvoid display()\n    {\n   \t System.out.println(\"In Square dim1= \"+dim1+\" dim2= \"+dim2);\n   \tSystem.out.println(\"Area= \"+area);\n    }\n}\npublic class RTPEg {\n\tpublic static void main(String args[])\n\t{\n\t\tShape1 sref;\n\t\tSqr sob=new Sqr(15);\n\t\tsob.calcArea();\n\t\tsob.display();\n\t\tsref=sob;\n\t\tCallob(sref);\n\t\tShape1 rob=new rect(25,65);\n\t\trob.calcArea();\n\t\trob.display();\n\t}\n\tstatic void Callob(Shape1 sref)\n\t{\n\t\tsref.calcArea();\n\t\tsref.display();\n\t}\n\n}\n",
    //23
    "\nimport java.util.Scanner;\n\ninterface InputOutput1\n{\n  void read();\n  void display();\n}\ninterface ShapesCalc1\n{\n\t void CalcArea();\n\t void CalcPeri();\n     float pi=3.1412f;\n}\n\nclass Complex1 implements InputOutput1\n{\n\tint real,img;\n\tComplex1()\n\t{\n\t\treal=5;img=7;\n\t}\n\tpublic void read()\n\t{\n\t\tScanner s=new Scanner(System.in);\n\t\treal=s.nextInt();\n\t\timg=s.nextInt();\n\t}\n\tpublic void display()\n\t{\n\t\tSystem.out.println(\"Complex= \"+real+\"+i\"+img);\n\t}\n}\nclass Circle1 implements InputOutput1,ShapesCalc1\n{\n  int rad;float area;\n  Circle1()\n  {\n\t  rad=3;\n  }\n  public void read()\n\t{\n\t\tScanner s=new Scanner(System.in);\n\t\trad=s.nextInt();\n\t}\n  public void CalcArea()\n  {\n\t  area=pi*rad*rad;\n  }\n  public void CalcPeri()\n  {\n\t  System.out.println(\"Perimeter :\"+(2*pi*rad));\n  }\n  public void display()\n  {\n\t  System.out.println(\"Radius : \"+rad+\" Area : \"+area);\n  }\n    \n}\npublic class DynMethRes {\n\tpublic static void main(String args[])\n\t{\n\t\tInputOutput1 ioref;\n\t\tComplex1 c1=new Complex1();\n\t\tCircle1 cob=new Circle1();\n\t\tioref=c1;\n\t\tc1.read();\n\t\tc1.display();\n\t\tioref=cob;\n\t\tioref.read();\n\t\tShapesCalc1 scref;\n\t\tscref =cob;\n\t\tscref.CalcArea();\n\t}\n\n}\n",
    //24
    "\npublic class FinalExample {\n\n    Example of a final variable\n    final int finalVariable = 10;\n\n    Example of a final method\n    final void displayMessage() {\n        System.out.println(\"This is a final method.\");\n    }\n\n    public static void main(String[] args) {\n        FinalExample example = new FinalExample();\n\n        Accessing the final variable\n        System.out.println(\"Final Variable: \" + example.finalVariable);\n\n        Calling the final method\n        example.displayMessage();\n\n        Uncommenting the following lines will result in compilation errors\n        example.finalVariable = 20; Cannot assign a value to a final variable\n        example.displayMessage(); Cannot override a final method\n    }\n}\n",
    //25
    "\n  class Exco1\n{\n\tpublic static void main(String args[])\n\t{\n\n\t\ttry\n\t\t{\n\t\t\tint d=0;\n\t\t\tint a=42/d;\n\t\t\tSystem.out.println(\"This will not be printed\");\n\t\t}\n\t\tcatch(ArithmeticException e)\n\t{\n\t\tSystem.out.println(\"Division by zero\"+e);\n\t}\n\tSystem.out.println(\"After catch statement\");\n\t}\n}\n\n",
    //26
    "\nclass Multicatch\n{\n\tpublic static void main(String args[])\n\t{\n\ttry\n\t{\n\tint a=args.length;\n\tSystem.out.println(\"a=\"+a);\n\tint b=42/a;\n\tint c[]={1};\n\tc[42]=99;\n\t}\n\tcatch(ArithmeticException e)\n\t{\n\t\tSystem.out.println(\"Divide by 0\"+e);\n\t}\n\tcatch(ArrayIndexOutOfBoundsException e)\n\t{\n\t\tSystem.out.println(\"array index out of bounds\"+e);\n\t}\n}\n}\n\n",
    //27
    "\nclass NestTry\n{\n\tpublic static void main(String args[])\n\t{\n\ttry\n\t{\n\t\tint a=args.length;\n\t\tint b=42/a;\n\t\tSystem.out.println(\"a=\"+a);\n\t\ttry\n\t\t{\n\t\t\tif(a==1)\n\t\t\t{\n\t\t\t\ta=a/(a-a);\n\t\t\t}\n\t\t\tif(a==2)\n\t\t\t{\n\t\t\t\tint c[]={1};\n\t\t\t\tc[42]=99;\n\t\t\t}\n\t\t}\n\t\tcatch(ArrayIndexOutOfBoundsException e)\n\t\t{\n\t\t\tSystem.out.println(\"array index out of bounds\"+e);\n\t\t\n\t\t}\n\t\n\t}\n\tcatch(ArithmeticException e)\n\t{\n\t\tSystem.out.println(\"Divide by 0\"+e);\n\t}\n\t}\n}\n",
    //28
    "\nclass ThrowDemo\n{\n\tstatic void demoproc()\n\t{\n\ttry\n\t{\n\t\tthrow new NullPointerException(\"demo\");\n\t}\n\tcatch(NullPointerException e)\n\t{\n\t\tSystem.out.println(\"caught inside dmoproc\");\n\t\tthrow e;\n\t}\n\t}\n\tpublic static void main(String arg[])\n\t{\n        try\n        {\n            demoproc();\n        }\n        catch(NullPointerException e)\n        {\n            System.out.println(\"Recaught:\"+e);\n        }\n\t}\n}\n",
    //29
    "\nclass MyException extends Exception\n{\n    private int detail;\n    MyException(int a)\n        {\n            detail=a;\n        }\n        public String toString()\n        {\n        return \"MyException(\"+detail+\")\";\n        }\n    }\nclass ExceptionDemo\n{\nstatic void compute(int a)throws MyException\n    {   \n    System.out.println(\"called compute(\"+a+\")\");\n    if(a>10)\n        throw new MyException(a);\n        System.out.println(\"normal exit\");\n    }\npublic static void main(String arg[])\n    {\n        try\n        {\n            compute(1);\n            compute(20);\n        }\n        catch(MyException e)\n        {\n            System.out.println(\"caught\"+e);\n        }\n    }\n}\n",
    //30
    "\n----------------------------------------------------------------\nkeep this in folder P1\n----------------------------------------------------------------\npackage P1;\nclass InP1ASP\n{\nint defp1=25;\npublic int pubp1=25;\nprivate int prip1=25;\nprotected int prop1=25;\n\npublic void display()\n{\n\tSystem.out.println(\"\n Display\");\n\tSystem.out.println(\" Default var InPack1 is\"+defp1);\n\tSystem.out.println(\" public var InPack1 is\"+pubp1);\n\tSystem.out.println(\" Private var InPack1 is\"+prip1);\n\tSystem.out.println(\" Protected var InPack1 is\"+prop1);\n}\n}\n\t\n----------------------------------------------------------------\nkeep this in folder P1\n----------------------------------------------------------------\npackage P1;\nclass InP1ASPImpl\n{\npublic static void main(String a[])\n{\nInP1ASP asp=new InP1ASP();\nasp.display();\n\n\tSystem.out.println(\"\n In Main\");\n\tSystem.out.println(\" Default var InPack1 is\"+asp.defp1);\n\tSystem.out.println(\" Public var InPack1 is\"+asp.pubp1);\n\t//System.out.println(\" Private var InPack1 is\"+asp.prip1);\n\tSystem.out.println(\" Protected var InPack1 is\"+asp.prop1);\n}\n}\n----------------------------------------------------------------\nkeep this in folder P1\n----------------------------------------------------------------\npackage P1;\n public class InP1pbCl\n{\nint defp1=25;\npublic int pubp1=25;\nprivate int prip1=25;\nprotected int prop1=25;\n\npublic void display()\n{\n\tSystem.out.println(\"\n Display\");\n\tSystem.out.println(\" Default var InPack1 is\"+defp1);\n\tSystem.out.println(\" Public var InPack1 is\"+pubp1);\n\tSystem.out.println(\" Private var InPack1 is\"+prip1);\n\tSystem.out.println(\" Protected var InPack1 is\"+prop1);\n}\n}\n----------------------------------------------------------------\nkeep this in folder P1\n----------------------------------------------------------------\n\npackage P1;\nclass InP1SubCl extends InP1PbCl\n{\npublic void SubDisplay()\n{\n\n\tSystem.out.println(\"\n In Display\");\n\tSystem.out.println(\"\n Default var InPack1 is\"+defp1);\n\tSystem.out.println(\"\n Public var InPack1 is\"+pubp1);\n\t//System.out.println(\"\n Private var InPack1 is\"+ prip1);\n\tSystem.out.println(\"\n Protected var InPack1 is\"+prop1);\n}\n}\npublic class InP1SubClImpl\n{\npublic static void main(String a[])\n{\nInP1SubCl Subob=new InP1SubCl();\nsubob.SubDisplay();\n}\n}\n\n----------------------------------------------------------------\n----------------------------------------------------------------\n\nclass OutP1ASPImpl\n{\npublic static void main(String a[])\n{\nP1.InP1ASP asp=new P1InP1ASP();\nasp.display;\n\n\tSystem.out.println(\"\n In Main\");\n\t//System.out.println(\" Default var InPack1 is\"+asp.defp1);\n\tSystem.out.println(\" Public var InPack1 is\"+asp.pubp1);\n\t//System.out.println(\" Private var InPack1 is\"+asp.prip1);\n\t//System.out.println(\" Protected var InPack1 is\"+asp.prop1);\n}\n}\n----------------------------------------------------------------\n----------------------------------------------------------------\n\nclass OutP1PubClImpl\n{\npublic static void main(String a[])\n{\nP1.InP1PubCl asp=new P1.InP1PubCl();\nasp.display();\n\n\tSystem.out.println(\"\n In Main\");\n\t//System.out.println(\" Default var InPack1 is\"+asp.defp1);\n\tSystem.out.println(\" Public var InPack1 is\"+asp.pubp1);\n\t//System.out.println(\"Private var InPack1 is\"+asp.prip1);\n\t//System.out.println(\" Protected var InPack1 is\"+asp.prop1);\n}\n}\n\t\n----------------------------------------------------------------\n----------------------------------------------------------------\n\nclass OutP1SubCl extends P1.InP1PubCl\n{\npublic void SubDisplay()\n{\n\n\tSystem.out.println(\"\n In Display\");\n\t//System.out.println(\" Default var InPack1 is\"+defp1);\n\tSystem.out.println(\" Public var InPack1 is\"+pubp1);\n\t//System.out.println(\" Private var InPack1 is\"+prip1);\n\tSystem.out.println(\" Protected var InPack1 is\"+prop1);\n}\n}\nclass OutP1SubClImpl\n{\npublic static void main(String a[])\n{\nOutP1SubCl Subob=new OutP1SubCl();\nsubob.SubDisplay();\n}\n}\n",
    //31
    "\n----------------------------------------------------------------\n1.    InPack1.java in Pack1 directory\n----------------------------------------------------------------\npackage Pack1;\npublic class InPack1\n{\tint ip1=25;\n\tpublic void display()\n\t{\t\n\t\tSystem.out.println(\" Value in InPck1 is \"+ip1);\n\t}\n}\n----------------------------------------------------------------\n2.   InPack2.java in Pack2 directory\n----------------------------------------------------------------\npackage Pack2;\npublic class InPack2\n{\tint ip2=2;\n\tpublic void display()\n\t{\n\t\tSystem.out.println(\" Value in InPack2 is \"+ip2);\n\t}\n}\n----------------------------------------------------------------\n3.     InPack21.java in Pack21 directory\n----------------------------------------------------------------\n\npackage Pack2.Pack21;\n\npublic class InPack21\n{\n\tint ip21=21;\n\tpublic void display()\n\t{\n\t\tSystem.out.println(\" Value in InPck21 is \"+ip21);\n\t}\n}\n----------------------------------------------------------------\n4.      OutPacksImpl.java in parent directory of Pack1\n----------------------------------------------------------------\nimport Pack1.InPack1;\nimport Pack2.InPack2;\nimport Pack2.Pack21.InPack21;\n\nclass OutPacksImpl\n{\tpublic static void main(String a[])\n\t{\tInPack1 ip1ob=new InPack1();\n\t\tip1ob.display();\n\n\t\tInPack2 ip2ob=new InPack2();\n\t\tip2ob.display();\n\n\t\tInPack21 ip21ob=new InPack21();\n\t\tip21ob.display();\n\t}\n}\n----------------------------------------------------------------\n5.       InPack21Import.java in Pack21 directory\n----------------------------------------------------------------\n\npackage Pack2.Pack21;\nimport Pack1.InPack1;\nimport Pack2.InPack2;\n\npublic class InPack21Import\n{\tint ip21=21;\n\tpublic void display()\n\t{\tSystem.out.println(\" Value in InPck21 is \"+ip21);\n\n\t\tInPack1 ip1ob=new InPack1();\n\t\tip1ob.display();\n\n\t\tInPack2 ip2ob=new InPack2();\n\t\tip2ob.display();\n\t}\n}\n----------------------------------------------------------------\n6.      OutPackImport.java in Parent directory of Pack1\n----------------------------------------------------------------\n\n\nimport Pack2.Pack21.InPack21Import;\n\nclass OutPacksImport\n{\n\tpublic static void main(String a[])\n\t{\n\t\tInPack21Import ip21ob=new InPack21Import();\n\t\tip21ob.display();\n\t}\n}\n\n",
    //32
    "\nclass NewThread implements Runnable\n{\n    Thread t;\n    NewThread()\n    {\n    t=new Thread(this,\"New Thread\");\n    System.out.println(\"in cons New Thread:\"+t);\n    t.start();\n    }\n    public void run()\n    {\n        try\n        {\n            for(int i=5;i>0;i--)\n            {\n            System.out.println(\"New Thread\"+t);\n            Thread.sleep(500);\n            }\n        }\n    catch (InterruptedException e)\n        {\n        System.out.println(\"New interrupted\");\n        }\n        System.out.println(\"Existing new thread\");\n    }\n}\n\nclass ThreadImpl\n{\npublic static void main(String args[])\n{\n    Thread mt=Thread.currentThread();\n    NewThread nt=new NewThread();\n    System.out.println(\"Main Thread:\"+mt);\n    System.out.println(\"New Thread:\"+nt);\n    System.out.println(\"New Thread:\"+nt.t);\n    try\n    {\n        for(int i=5;i>0;i--)\n            {\n            System.out.println(\"Main Thread:\"+i);\n            Thread.sleep(1000);\n            }\n    }\n        catch (InterruptedException e)\n        {\n        System.out.println(\"Main Thread interrupted\");\n        }\n    System.out.println(\"Main Thread Existing \");\n    }\n}\n",
    //33
    "\nclass MyThread extends Thread\n{\n\tMyThread()\n\t{\n\t\tsuper(\"My Thread\");\n\t\tSystem.out.println(\"My thread: \"+this);\n\t\tstart();\n\t}\n\tpublic void run()\n\t{\n\t\ttry\n\t\t{\n\t\t\tfor(int i=5;i>0;i--)\n\t\t\t{\n\t\t\t\tSystem.out.println(\"My Thread: \"+i);\n\t\t\t\tThread.sleep(500);\n\t\t\t}\n\t\t}\n\t\tcatch(InterruptedException e)\n\t\t{\n\t\t\tSystem.out.println(\"My interrupted.\");\n\t\t}\n\t\tSystem.out.println(\"Exiting MyThread\");\n\t}\n}\nclass ThreadExtension\n{\n\tpublic static void main(String args[])\n\t{\n\t\tThread mt=Thread.currentThread();\n\t\tMyThread myt=new MyThread();\n\t\tSystem.out.println(\"Main Thread: \"+mt);\n\t\tSystem.out.println(\"New Thread: \"+myt);\n\t\ttry\n\t\t{\n\t\t\tfor(int i=5;i>0;i--)\n\t\t\t{\n\t\t\t\tSystem.out.println(\"Main Thread: \"+i);                                                                                                                                                                         \n\t\t\t\tThread.sleep(1000);\n\t\t\t}\n\t\t}\n\t\tcatch(InterruptedException e)\n\t\t{\n\t\t\tSystem.out.println(\"Main thread interrupted.\");\n\t\t}\n\t\tSystem.out.println(\"Main thread exiting.\");\n\t}\n}\n",
    //34
    "\nclass NewThread2 implements Runnable\n{\n\tString name; //name of thread\n\tThread t;\n\tNewThread2(String threadname)\n\t{\n\t\tname=threadname;\n\t\tt=new Thread(this,name);\n\t\tSystem.out.println(\"New thread: \"+t);\n\t\tt.start(); //start the thread\n\t}\n\tpublic void run()\n\t{\n\t\ttry\n\t\t{\n\t\t\tfor(int i=5;i>0;i--)\n\t\t\t{\n\t\t\t\tSystem.out.println(name+\":\"+i);\n\t\t\t\tThread.sleep(1000);\n\t\t\t}\n\t\t}\n\t\tcatch(InterruptedException e)\n\t\t{\n\t\t\tSystem.out.println(name+\"Interrupted.\");\n\t\t}\n\t\tSystem.out.println(name+\"exiting\");\n\t}\n}\nclass MultiThreads\n{\n\tpublic static void main(String args[])\n\t{\n\t\t\n\t\tNewThread2 nt1=new NewThread2(\"One\");  //start threads\n\t\tNewThread2 nt2=new NewThread2(\"Two\");\n\t\tNewThread2 nt3=new NewThread2(\"Three\");\n\t\ttry\n\t\t{\n\t\t\tThread.sleep(1000);\n\t\t}\n\t\t\n\t\tcatch(InterruptedException e)\n\t\t{\n\t\t\tSystem.out.println(\"Main thread Interrupted.\");\n\t\t}\n\t\tSystem.out.println(\"Main thread exiting.\");\n\t}\n}\n\t\n",
    //35
    "\nclass NewThread2 implements Runnable\n{\n\tString name; //name of thread\n\tThread t;\n\tNewThread2(String threadname)\n\t{\n\t\tname=threadname;\n\t\tt=new Thread(this,name);\n\t\tSystem.out.println(\"New thread: \"+t);\n\t\tt.start(); //start the thread\n\t}\n\t//this is the entry point for thread\n\tpublic void run()\n\t{\n\t\ttry\n\t\t{\n\t\t\tfor(int i=5;i>0;i--)\n\t\t\t{\n\t\t\t\tSystem.out.println(name+\":\"+i);\n\t\t\t\tThread.sleep(1000);\n\t\t\t}\n\t\t}\n\t\tcatch(InterruptedException e)\n\t\t{\n\t\t\tSystem.out.println(name+\"Interrupted.\");\n\t\t}\n\t\tSystem.out.println(name+\"exiting\");\n\t}\n}\n class DemoJoin\n{\npublic static void main(String args[])\n{\nNewThread2 ob1=new NewThread2(\"one\");\nNewThread2 ob2=new NewThread2(\"two\");\nNewThread2 ob3=new NewThread2(\"three\");\nSystem.out.println(\"Thread one is alive:\"+ob1.t.isAlive());\nSystem.out.println(\"Thread two is alive:\"+ob2.t.isAlive());\nSystem.out.println(\"Thread three is alive:\"+ob3.t.isAlive());\ntry\n{\nSystem.out.println(\"Waiting for threads to finish\");\nob1.t.join();\nob2.t.join();\nob3.t.join();\n}\ncatch (InterruptedException e)\n{\n System.out.println(\"Main Thread interrupted\");\n}\nSystem.out.println(\"Thread one is alive:\"+ob1.t.isAlive());\nSystem.out.println(\"Thread two is alive:\"+ob2.t.isAlive());\nSystem.out.println(\"Thread three is alive:\"+ob3.t.isAlive());\nSystem.out.println(\"Main thread Exiting\");\n}\n}\n",
    //36
    "\nclass CountExec implements Runnable\n{\n\tlong exec=0;\n\tThread t;\n\tString name;\n\tprivate volatile boolean running=true;\n\tpublic CountExec(int p,String n)\n\t{\n\t\tt=new Thread(this,n);\n\t\tt.setPriority(p);\n\t\tt.start();\n\t}\n\tpublic void run()\n\t{\n\t\twhile(running)\n\t\t\texec++;\n\t}\n\tpublic void stop()\n\t{\n\t\trunning=false;\n\t\tSystem.out.println(this.t+\" exiting\");\n\t}\n}\nclass ThreadPriority\n{\n\tpublic static void main(String args[])\n\t{\n\t\tThread.currentThread().setPriority(Thread.MAX_PRIORITY);\n\t\tCountExec hi=new CountExec(Thread.NORM_PRIORITY+2,\"high\");\n\t\tCountExec lo=new CountExec(Thread.NORM_PRIORITY-2,\"low\");\n\t\ttry\n\t\t{\n\t\t\tThread.sleep(1000);\n\t\t}\n\t\tcatch(InterruptedException e)\n\t\t{\n\t\t\tSystem.out.println(\"Main thread Interrupted\");\n\t\t}\n\t\thi.stop();\n\t\tlo.stop();\n\t\t//wait for child thread to terminate\n\t\ttry\n\t\t{\n\t\t\thi.t.join();\n\t\t\tlo.t.join();\n\t\t}\n\t\tcatch(InterruptedException e)\n\t\t{\n\t\t\tSystem.out.println(\"InterruptedException caught\");\n\t\t}\n\t\tSystem.out.println(\"low-priority thread: \"+lo.exec);\n\t\tSystem.out.println(\"high-priority thread: \"+hi.exec);\n\t}\n}\n",
    //37
    "\nclass SimpleInt\n{\n\tprivate int rate=9;\n\tprivate float SI;\n\tvoid calcSI(int P,int T)\n\t{\n\t\tSI=(P*T*rate)/100;\n\t\ttry\n\t\t{\n\t\t\tThread.sleep(500);\n\t\t}\n\t\tcatch(InterruptedException e)\n\t\t{\n\t\t\tSystem.out.println(\"Interrupted\");\n\t\t}\n\t\tSystem.out.println(\"SI=\"+SI+\"for P=\"+P+\"and T=\"+T);\n\t}\n}\nclass Deposits implements Runnable\n{\n\tint P,T;\n\tSimpleInt SIob;\n\tThread th;\n\tpublic Deposits(SimpleInt siob,int p,int t)\n\t{\n\t\tSIob=siob;\n\t\tP=p;\n\t\tT=t;\n\t\tth=new Thread(this);\n\t\tth.start();\n\t}\n\tpublic void run()\n\t{\n\t\tSIob.calcSI(P,T);\n\t}\n}\n\nclass SynMethod\n{\n\tpublic static void main(String args[])\n\t{\n\t\tSimpleInt siob=new SimpleInt();\n\t\tDeposits dep1=new Deposits(siob,100,1);\n\t\tDeposits dep2=new Deposits(siob,1000,1);\n\t\tDeposits dep3=new Deposits(siob,10000,1);\n\t\ttry\n\t\t{\n\t\t\tdep1.th.join();\n\t\t\tdep2.th.join();\n\t\t\tdep2.th.join();\n\t\t}\n\t\tcatch(InterruptedException e)\n\t\t{\n\t\t\tSystem.out.println(\"Interrupted\");\n\t\t}\n\t\t\n\t}\n}\n",
    //38
    "\nclass SimpleInt\n{\n\tprivate int rate=9;\n\tprivate float SI;\n        synchronized void calcSI(int P,int T)\n\t{\n\t\tSI=(P*T*rate)/100;\n\t\ttry\n\t\t{\n\t\t\tThread.sleep(500);\n\t\t}\n\t\tcatch(InterruptedException e)\n\t\t{\n\t\t\tSystem.out.println(\"Interrupted\");\n\t\t}\n\t\tSystem.out.println(\"SI=\"+SI+\"for P=\"+P+\"and T=\"+T);\n\t}\n}\nclass Deposits implements Runnable\n{\n\tint P,T;\n\tSimpleInt SIob;\n\tThread th;\n\tpublic Deposits(SimpleInt siob,int p,int t)\n\t{\n\t\tSIob=siob;\n\t\tP=p;\n\t\tT=t;\n\t\tth=new Thread(this);\n\t\tth.start();\n\t}\n\tpublic void run()\n\t{\n\t\tSIob.calcSI(P,T);\n\t}\n}\n\nclass SynMethod2\n{\n\tpublic static void main(String args[])\n\t{\n\t\tSimpleInt siob=new SimpleInt();\n\t\tDeposits dep1=new Deposits(siob,100,1);\n\t\tDeposits dep2=new Deposits(siob,1000,1);\n\t\tDeposits dep3=new Deposits(siob,10000,1);\n\t\ttry\n\t\t{\n\t\t\tdep1.th.join();\n\t\t\tdep2.th.join();\n\t\t\tdep2.th.join();\n\t\t}\n\t\tcatch(InterruptedException e)\n\t\t{\n\t\t\tSystem.out.println(\"Interrupted\");\n\t\t}\n\t\t\n\t}\n}\n",
    //39
    "\nclass Q1\n{\n\tint n;\n\tsynchronized int get()\n\t{\n\t\tSystem.out.println(\"Get:\'\"+n);\n\t\treturn n;\n\t}\n\tsynchronized void put(int n)\n\t{\n\t\tthis.n=n;\n\t\tSystem.out.println(\"Put:\"+n);\n\t}\n}\n class Producer1 implements Runnable\n{\n\tThread t;\n\tQ1 q;\n\tProducer1(Q1 q)\n\t{\n\t\tthis.q=q;\n\t\tt=new Thread(this,\"Producer\");\n\t\tt.start();\n\t}\n\tpublic void run()\n\t{\n\t\tint i=0;\n\t\twhile(true)\n\t\t{\n\t\t\tq.put(i++);\n\t\t}\n\t}\n}\n\nclass Consumer1 implements Runnable\n{\n\tThread t;\n\tQ1 q;\n\tConsumer1(Q1 q)\n\t{\n\t\tthis.q=q;\n\t\tt=new Thread(this,\"Consumer\");\n\t\tt.start();\n\t}\n\tpublic void run()\n\t{\n\t\tint i=0;\n\t\twhile(true)\n\t\t{\n\t\t\tq.get();\n\t\t}\n\t}\n}\n\nclass Pc\n{\n\tpublic static void main(String args[])\n\t{\n\t\tQ1 q=new Q1();\n\t\tnew Producer1(q);\n\t\tnew Consumer1(q);\n\t}\n}\n",
    //40
    "\nimport java.awt.*;\nimport java.applet.*;\n/* \t<applet code=\"SimpleApplet\" width=700 height=100>\n</applet> */\npublic class SimpleApplet extends Applet\n{\n\tpublic void init() \n\t{\n\t\tsetBackground(Color.CYAN);\n\t\tsetForeground(Color.blue);\n\t}\n\tDisplay msg in applet window.\n\tpublic void paint(Graphics g) \n\t{\n\t\tg.drawString(\"This is in the applet window.\", 10, 20);\n\t\tg.drawString(\"Welcome to applets.\", 100, 50);\n\t}\n}\n\n",
    //41
    "\nimport java.awt.*;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\n\nclass FrameDemo extends Frame \n{\tFrameDemo(String title) \n\t{   \tsuper(title);\n\t\tsetSize(700,700);\n\t\tsetVisible(true);\n\t\tsetBackground(Color.CYAN);\t\n\t\tsetForeground(Color.BLUE);\n\t\taddWindowListener(new WindowAdapter()\n\t\t\t{\n\t\t\t\tpublic void windowClosing(WindowEvent we) \n\t\t\t\t{\tSystem.exit(0);\n\t\t\t\t}\n\t\t\t}\n\t  \t  );\n\t}\n\t\tpublic void paint(Graphics g) \n\t\t{\n\t\t\tg.drawLine(40, 225, 250, 180);\n\n\t\t\tg.drawRect(10, 50, 60, 50);\n\t\t\tg.fillRect(100, 50, 30, 30);\n\t\n\t\t\tg.drawRoundRect(190, 50, 60, 50, 15, 15);\n\t\t\tg.fillRoundRect(270, 100, 140, 100, 30, 40);\n\n\t\t\tg.drawOval(300, 250, 50, 50);\n\t\t\tg.fillOval(70, 90, 140, 100);\n\t\t}\n\n\t\tpublic static void main(String a[])\n\t\t{\n\t\t\tnew FrameDemo(\"My First Frame\");\n\t\t\tSystem.out.println(\" This is an application\");\n\t\t}\n}\n",
    //42
    "\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.applet.*;\n/*<applet code=\"MouseEvents\" width=300 height=100>\n</applet>*/\npublic class MouseEvents extends Applet implements MouseListener,MouseMotionListener\n{\n\tString msg=\" \";\n\tint mousex=0,mousey=0;\n\tpublic void init()\n\t{\n\t\taddMouseListener(this);\n\t\taddMouseMotionListener(this);\n\t}\n\tpublic void mouseClicked(MouseEvent me)\n\t{\n\t\tmousex=0;\n\t\tmousey=10;\n\t\tmsg=\"mouse clicked\";\n\t\trepaint();\n\t}\n\tpublic void mouseEntered(MouseEvent me)\n\t{\n\t\tmousex=0;\n\t\tmousey=10;\n\t\tmsg=\"mouse Entered\";\n\t\trepaint();\n\t}\n\tpublic void mouseExited(MouseEvent me)\n\t{\n\t\tmousex=0;\n\t\tmousey=10;\n\t\tmsg=\"mouse Exited\";\n\t\trepaint();\n\t}\n\tpublic void mousePressed(MouseEvent me)\n\t{\n\t\tmousex=me.getX();\n\t\tmousey=me.getY();\n\t\tmsg=\" \";\n\t\trepaint();\n\t}\n\tpublic void mouseReleased(MouseEvent me)\n\t{\n\t\tmousex=me.getX();\n\t\tmousey=me.getY();\n\t\tmsg=\"up\";\n\t\trepaint();\n\t}\n\tpublic void mouseDragged(MouseEvent me)\n\t{\n\t\tmousex=me.getX();\n\t\tmousey=me.getY();\n\t\tmsg=\"*\";\n\t\tshowStatus(\"Dragging mouse at\"+mousex+\",\"+mousey);\n\t\trepaint();\n\t}\n\tpublic void mouseMoved(MouseEvent me)\n\t{\n\t\tshowStatus(\"Moving mouse at \"+me.getX()+\",\"+me.getY());\n\t}\n\tpublic void paint(Graphics g)\n\t{\n\t\tg.drawString(msg,mousex,mousey);\n\t}\n}\t\n",
    //43
    "\nimport javax.swing.*;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\n\npublic class SimpleKeyboardEventListenerDemo extends JFrame implements KeyListener {\n\n    public SimpleKeyboardEventListenerDemo() {\n        Set up the JFrame\n        super(\"Simple Keyboard Event Listener Demo\");\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        setSize(300, 200);\n\n        Add KeyListener to the JFrame\n        addKeyListener(this);\n\n        Set up the layout\n        setFocusable(true);\n    }\n\n    @Override\n    public void keyTyped(KeyEvent e) {\n        Invoked when a key is typed (pressed and released)\n        char keyChar = e.getKeyChar();\n        System.out.println(\"Key Typed: \" + keyChar);\n    }\n\n    @Override\n    public void keyPressed(KeyEvent e) {\n        Invoked when a key is pressed\n        int keyCode = e.getKeyCode();\n        System.out.println(\"Key Pressed: \" + KeyEvent.getKeyText(keyCode));\n    }\n\n    @Override\n    public void keyReleased(KeyEvent e) {\n        Invoked when a key is released\n        int keyCode = e.getKeyCode();\n        System.out.println(\"Key Released: \" + KeyEvent.getKeyText(keyCode));\n    }\n\n    public static void main(String[] args) {\n        SwingUtilities.invokeLater(new Runnable() {\n            @Override\n            public void run() {\n                SimpleKeyboardEventListenerDemo demo = new SimpleKeyboardEventListenerDemo();\n                demo.setVisible(true);\n            }\n        });\n    }\n}\n\n",
    //44
    "\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class SwingDemo {\n\n    private JFrame frame;\n    private JPanel panel;\n    private JTextField textField;\n    private JLabel label;\n\n    public SwingDemo() {\n        frame = new JFrame(\"Swing Demo\");\n        frame.setSize(300, 200);\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n        panel = new JPanel(new GridLayout(3, 1));\n\n        textField = new JTextField();\n        JButton button = new JButton(\"Click Me\");\n        label = new JLabel();\n\n        button.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                String text = textField.getText();\n                label.setText(\"Hello, \" + text + \"!\");\n            }\n        });\n\n        panel.add(textField);\n        panel.add(button);\n        panel.add(label);\n\n        frame.add(panel);\n        frame.setVisible(true);\n    }\n\n    public static void main(String[] args) {\n        SwingUtilities.invokeLater(new Runnable() {\n            @Override\n            public void run() {\n                new SwingDemo();\n            }\n        });\n    }\n}\n",
    //45
    "\nimport javax.swing.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class SimpleFactorialCalculator extends JFrame {\n    private JTextField inputField;\n    private JLabel resultLabel;\n\n    public SimpleFactorialCalculator() {\n        Set up the JFrame\n        super(\"Factorial Calculator\");\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        setSize(300, 150);\n        setLayout(new BoxLayout(getContentPane(), BoxLayout.Y_AXIS));\n\n        Create and add components\n        inputField = new JTextField(10);\n        JButton calculateButton = new JButton(\"Calculate Factorial\");\n        resultLabel = new JLabel(\"Factorial result will be displayed here.\");\n\n        Add components to the JFrame\n        add(new JLabel(\"Enter a number:\"));\n        add(inputField);\n        add(calculateButton);\n        add(resultLabel);\n\n        Register ActionListener for the button\n        calculateButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                calculateFactorial();\n            }\n        });\n    }\n\n    private void calculateFactorial() {\n        try {\n            Get the input from the text field\n            int number = Integer.parseInt(inputField.getText());\n\n            Calculate the factorial\n            long factorial = 1;\n            for (int i = 1; i <= number; i++) {\n                factorial *= i;\n            }\n\n            Display the result in the label\n            resultLabel.setText(\"Factorial of \" + number + \" is: \" + factorial);\n        } catch (NumberFormatException ex) {\n            resultLabel.setText(\"Please enter a valid integer.\");\n        }\n    }\n\n    public static void main(String[] args) {\n        SwingUtilities.invokeLater(new Runnable() {\n            @Override\n            public void run() {\n                new SimpleFactorialCalculator().setVisible(true);\n            }\n        });\n    }\n}\n",
    //46
    "\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class BorderLayoutDemo extends JFrame {\n\n    public BorderLayoutDemo() {\n        Set up the JFrame\n        super(\"BorderLayout Demo\");\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        setSize(400, 300);\n\n        Create components\n        JButton btnNorth = new JButton(\"North\");\n        JButton btnSouth = new JButton(\"South\");\n        JButton btnEast = new JButton(\"East\");\n        JButton btnWest = new JButton(\"West\");\n        JButton btnCenter = new JButton(\"Center\");\n\n        Set layout manager to BorderLayout\n        setLayout(new BorderLayout());\n\n        Add components to the JFrame with specified regions\n        add(btnNorth, BorderLayout.NORTH);\n        add(btnSouth, BorderLayout.SOUTH);\n        add(btnEast, BorderLayout.EAST);\n        add(btnWest, BorderLayout.WEST);\n        add(btnCenter, BorderLayout.CENTER);\n    }\n\n    public static void main(String[] args) {\n        SwingUtilities.invokeLater(new Runnable() {\n            @Override\n            public void run() {\n                new BorderLayoutDemo().setVisible(true);\n            }\n        });\n    }\n}\n\n",
    //47
    "\nimport java.awt.*;\nimport javax.swing.JApplet;\nimport javax.swing.JButton;\n/*<applet code=\"Gridlayout\" width=200 height=50></applet>*/\npublic class Gridlayout extends JApplet\n{\n\tstatic final int n=4;\n\tJButton barray[]=new JButton[16];\n\tpublic void init()\n\t{\n\t\tsetLayout(new GridLayout(n,n));\n\t\tsetFont(new Font(\"sans serif\",Font.BOLD,24));\n\t\tfor(int i=0;i<barray.length-1;i++)\n\t\t{\n\t\t\tbarray[i]=new JButton(i+1+\" \");\n\t\t\tadd(barray[i]);\n\t\t}\n\t\tbarray[barray.length-1]=new JButton();\n\t\tadd(barray[barray.length-1]);\n\t}\n\t\t\n}\n",
    //48
    "\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n/*<applet code=\"JcheckBoxDemo\" width=270 height=50 > </applet> */\npublic class JcheckBoxDemo extends JApplet  implements ItemListener\n{\nJLabel jlab;\npublic void init()\n{\n try\n {\n\tSwingUtilities.invokeAndWait(new Runnable()\n\t{\n\t\tpublic void run()\n\t\t{\n\t\t\tmakeGUI();\n\t\t}\n\t}\n\t); \n }\n catch (Exception exc)\n {\n\t  System.out.println(\"Can\'t Execute because \"+exc);\n }\n}\npublic void makeGUI()\n{\n\tsetLayout(new FlowLayout());\n\tJCheckBox cb=new JCheckBox(\"C\");cb.addItemListener(this);add(cb);\n\tcb=new JCheckBox(\"C++\");cb.addItemListener(this);add(cb);\n\tcb=new JCheckBox(\"Java\");cb.addItemListener(this);add(cb);\n\tcb=new JCheckBox(\"Perl\");cb.addItemListener(this);add(cb);\n\tjlab=new JLabel(\"Select Languages\");add(jlab);\n\t\n}\npublic void itemStateChanged(ItemEvent ie)\n{\n JCheckBox\tcb=(JCheckBox)ie.getItem();\n if(cb.isSelected())\n {\n\t  jlab.setText(cb.getText()+\" Is Selected\"); \n }\n else\n {\n\t  jlab.setText(cb.getText()+\" Is Cleared\");\n }\n}\n}\n",
    //49
    "\nimport java.io.*;\npublic class FileInput {\n\tpublic static void main(String args[]) throws IOException\n\t{\n\t\tint size,n=25;\n\t\tFileInputStream f= new FileInputStream(\"C:\\Users\\USER\\eclipse-workspace\\java_files\\src\\java_files\\palindrome.java\");\n\t\tsize=f.available();\n\t\tSystem.out.println(\"Total Available Bytes: \"+size);\n\t\tSystem.out.println(\"Reading First 25 bytes of the file\");\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tSystem.out.println((char)f.read());\n\t\t}\n\t\tSystem.out.println(\"Available Bytes: \"+f.available());\n\t\tSystem.out.println(\"Reading next 25 characters using byte array\");\n\t\tbyte b[]=new byte[n];\n\t\tf.read(b);\n\t\tSystem.out.println(new String(b,0,n));\n\t\tSystem.out.println(\"Available Bytes: \"+(size=f.available()));\n\t\tSystem.out.println(\"skipping half of available bytes using skip()\");\n\t\tf.skip(size/2);\n\t\tSystem.out.println(\"Still Available Bytes:\"+f.available());\n\t}\n}\n",
    //50
    "\nimport java.io.DataInputStream;\nimport java.io.IOException;\nclass DataInput\n{\n\tpublic static void main(String arg[]) throws IOException\n\t{\n\t\tDataInputStream dis=new DataInputStream(System.in);\n\t\t\n\t\tSystem.out.println(\"Enter an int:\");\n\n\t\tdis.readInt();\n\t\tint i=dis.readInt();\n\t\tSystem.out.println(\"Entered:\"+i);\n\t\tSystem.out.println(\"Enter an int:\");\n\t\tString s=dis.readLine();\n\t\tint i2=Integer.parseInt(s);\n\t\tSystem.out.println(\"entered:\"+i2);\n\t\tSystem.out.println(\"Enter an float:\");\n\t\tfloat f=Float.parseFloat(dis.readLine());\n\t\tSystem.out.println(\"Entered :\");\n\t}\n}\n",
    //51
    "\nimport java.io.*;\npublic class FileOuput {\n\tpublic static void main(String args[]) throws IOException\n\t{\n\t  String source=\"Now is the time for all students\"+\" to learn java\";\n\t  FileOutputStream fo=new FileOutputStream(\"File1.txt\");\n\t  byte buf[]=source.getBytes();\n\t  for(int i=0;i<buf.length;i++)\n\t  {\n\t\t  fo.write(buf[i]);\n\t  }\n\t  FileOutputStream f1=new FileOutputStream(\"File2.txt\");\n\t  f1.write(buf);\n\t  fo.close();\n\t  f1.close();\t\t\t\n\t}\n}\n\n",
    //52
    "\nimport java.io.*;\npublic class copy {\n\tpublic static void main(String args[]) throws IOException\n\t{\n\t\tint size;\n\t\tFile f1=new File(\"C:\\Users\\USER\\OneDrive\\Desktop\\Java\\palindrome..txt\");\n\t\tFileInputStream fin=new FileInputStream(f1);\n\t\tsize=fin.available();\n\t\tbyte buf[]=new byte[size];\n\t\tfin.read(buf);\n\t\tFileOutputStream fout=new FileOutputStream(\"copy.txt\");\n\t\tfout.write(buf);\n\t\tfin.close();\n\t\tfout.close();\n\t}\t\n}\n\n",
    //53
    "\nimport java.io.*;\nclass BRRead\n{\n\tpublic static void main(String a[]) throws IOException\n\t{\n\t\tchar c;\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n\t\tSystem.out.println(\"enter char,\'Q\' to quit\");\n\t\tdo\n\t\t{\n\t\t\tc=(char)br.read();\n\t\t\tSystem.out.println(c);\n\t\t}\n\t\twhile(c!=\'Q\');\n\t\n\t\tSystem.out.println(\"input stopped\");\n\t}\n}\n"

];
answers.Add("JAVAanswers", JAVAanswers);


subjects.Add("DBMS", [
    "\n\nTASK-1\n\n\nCreate tables with the Following entities \n a. Student (sid, sname, sage, branch, cgpa, sdob) \n b. Course (cid, cname, duration) Note: sname, cname are not null, sage may be null",
    "Print the description of both Student, Course tables separately. ",
    "Add the Column contact_no to the Student table. ",
    "Insert minimum of 5 Tuples/ Records in the each of the Relation.",
    "Display records of the both relations. ",
    "Update the age of a specific student and the duration of a particular course in the \"Student\" and \"Course\" tables, respectively.",
    "Update student name as \"James\" whose date of birth is 19-09-1998( or any other date of birth which you inserted)",       
    "Delete the Column sdob from student table. ",
    "Add Primary key constraint to cid in Course table. ",
    "Rename column name sbranch to s_stream",
    "Insert records as follows \n"+"i. record with only (sid, sname, branch) values \n"+"ii. record with only (sid, sage, cgpa) values \n"+"iii. specify random order of values.\n",
     "Display the student details whose age is greater than the 30.",
     "Delete the course table",
    "Rename the student table as aimlb_students. ",
    " Modify sage data type real. ",
     "Set the age of a selected student to NULL. ",
     "Drop the primary key constraint on course table. ",
     "Alter the sname datatype size to 30 ",
    "Add column Grade to student table.",
    "Update cgpa>=9 as Grade \"A\"",
     "Update cgpa<9 and cgpa>=8 as Grade \"B\". ",
     "Update remaining cgpa<8 as Grade \"C\". ",
    "Increase the CGPA of all students by 0.5 points (e.g., add 0.5 to each student's current CGPA). ",
     "Delete record(s) whose cgpa<6. ",
     "Delete all records from Course table.",
     "\n\nTASK-2\n\nCreate tables with the Following entities \n"+"a. Student (sid, sname, sage, branch, cgpa, sdob)\n" +"b. Course (cid, cname, duration) \n"+"Note: sname, cname are not null, sage may be null", 
    "Add the Column contact_no, grade to the Student table. ",
    "Insert minimum of 5 Tuples/ Records in the each of the Relation. ",
    " Update the age of a specific student. ",
    "Update student name as ‘James’ whose date of birth is 19-09-1998 ( or any other date of birth which you inserted) ",
    "Delete the Column sdob from student table. ",
    "Add Primary key constraint to cid in Course table." ,
    "Rename the student table as aimlb_students. ",
    "Modify sage data type real." ,
    "Set the age of a selected student to NULL. ",
    " Drop the primary key constraint on course table. ",
    "Update cgpa>=9 as Grade ‘A’ ",
    " Update cgpa<9 and cgpa>=8 as Grade ‘B’. ",
    "Increase the CGPA of all students by 0.5 points (e.g., add 0.5 to each student's current CGPA). ",
    "Delete record(s) whose cgpa<6.",
    "\n\nTASK-3\n\nCreate Employee, Department Sailors, Boats, Reserves tables and insert the values into concern tables with the following information ",
    "Display unique designations for the employees.",
     "List the details of emp_name, manager_id. ",
    " Query to list the emp_name, salary increased by 15% project as Increased_sal. ",
     "Query to produce the output of emp_name and job_name as a format of “employee&job”. ",
     "Select the number of characters in each emp_name. ",
     "Query to display employee details for dept_id in 2001 ",
     "Query to display employee details who belongs to dept 2001,1001. ",
     "Query to display employee details for dept_id not in 2001 ",
    " Query to list the employees whose salary is more than 3000 giving 25% increment. ",
    " Query to display employee details whose salary between 1300, 2000. ",
     "Query to list the employees who joined before 1991 ",
    "\n\nTASK-4\n\n\nRetrieve all salesmen who are paid more than 1500 a month. ",
    " Retrieve employees who are working department 1001 or department 3001. ",
    " List all employees who are not manager. ",
    "Find employee details from ‘SYDNEY’ location. ",
    "List the names of employees and their manager separated by the string ‘works_for’. ",
    "List the employee names those names starting with ‘A’ and having six characters." ,
    "List the employees whose names contain five characters, and third character must be ‘A’. ",
    "List names start with ‘M’ and contain ‘E’ letter. ",
    "List name, job, salary of employees whose name start with ‘A’ and end with ‘S’." ,
    "List the employees in the ascending order of their Salaries." ,
    "List the details of the employees in ascending order of the Department no’s and descending order of Jobs." ,
    "Display all the unique job groups in descending order." ,
    "Display emp_name, emp_id, dep_id, salary of clerks whose salary is more than 900 in descending order.",
    "Find the dep_id 1001 employees Avg Salary. ",
    " Find the Average salary of Salesmen." ,
    "Count the number of different jobs in the EMP table without listing them. ",
    " What is the salary paid to the lowest-paid employee working under dep_id 3001. ",
    "Find the total annual pay for a managers and display result with the name of ANNUAL_SAL. ",
    " Find the sum of the salaries of all employees, the maximum salary, the minimum salary, and the average Salary. Display with proper headings.",
    " Find max and min sal of employees working under dep_id 1001,3001. ",
    "Display ename, job, annual sal, dep_id of employee who are getting more than 35000 CTC",
    "\n\n\nTASK-5\n\n\nFind the names and ages of all sailors",
    "Find all sailors with a rating above 7",
    "find the names of sailors who have reserved a boat number 103",
    "Find the names of sailors,color boat reserved by sailor 22",
    "Find the sid's of sailors who have reserves a 'Red' boat",
    "Find the names of sailors who have reserved a 'Red' boat",
    "Find the colors of boats reserved by 'Lubber'.",
    "Find the names of sailors who have reserved atleast one boat",
    "Find the ages of sailors whose name begins and ends with 'B' and has atleast three charcaters",
    "\n\nTASK-6\n\nCreate a table ‘emp’ with the attributes eid, ename, category, did where category value ranging from A to E and did default value 01 if not assigned. ",    
    "Find sailors whose rating is better than some sailor called 'HORATIO'. ",
    "Find sailors whose rating is better than every sailor called 'HORATIO'. ",
    "Find the names of sailors who have reserved a 'Red' or a 'Green' Boat ",
    "Find the names of sailors who have reserved a 'Red' and a 'Green' Boat ",
    "Find the names of sailors who have reserved a red but not a blue boat ",
    "Find the age of the youngest sailor for each rating level" ,
    "Find the age of the youngest sailor who is eligible to vote(i.e., is at least 18 years old) for each rating level with at least two such sailors",
    "For each red boat, find the number of reservations for this boat ",
    "Find the details of employees who are not allotted any manager" ,
    "Find the details of employees who are working under a manager ",
    "Find the employee details except the department number 3001 and job name not a salesman.",
    "\n\nTASK-7\n\nFind the names of sailors who have reserved a red boat. (Use IN operator) ",
    "Find the names of sailors who have reserved boat no 103. (Use EXISTS operator)" ,
    "To find sailors who have not reserved any red boats. (Use NOT EXISTS operator) ",
    "Find sailors who have not reserved any boats. (Use NOT EXISTS operator) ",
    "Find the age of the youngest sailor who is eligible to vote (i.e., is at least 18 years old) for each rating level ",
    "Find the age of the youngest sailor who is eligible to vote (i.e., is at least 18 years old) for each rating level with at least two such sailors. ",
    "Find the names of sailors who have reserved at least two different boats. 8) Find the details of employees who are not assigned to any manger. (Use IS NULL operator).", 
    "Find the details of employees who are working under a department. (Use IS NOT NULL operator). ",
    "Find the employee details except the department number 2001. (Use NOT Operator) ",
    "Find the employee details whose department number is not 3001 and age is not less than 36. (Use NOT Operator). ",
    "List the customers not purchased any book along with purchased customer details. (Use Natural Left Outer Join) " ,   
    "List the customers details not present but some customer entries present in purchase table. (Use Natural Right Outer Join) ",
    "List the customers not purchased any book and purchases done without customer entries present in customer table (Use Natural Full Outer Join).",
    "\n\nTASK-9\n\nWrite a PL-SQL Program to find maximum number among three numbers ",
    "Write a PL-SQL Program to check whether a number is odd or even. ",
    "Write a PL-SQL Program to print all natural numbers from 1 to n using For loop.",
    "Write a PL-SQL Program to Print all odd numbers between 1 to 100 ",
    "Write a PL-SQL Program to print sum of all even numbers between 1 to n.", 
    "Write a PL-SQL Program to print mathematical table of any number. ",
    "Write a PL-SQL Program to count number of digits in any number.", 
    "Write a PL-SQL Program to calculate sum of digits of any number",
    "\n\nTASK-10\n\ncreating a Procedure",
    "Calling a procedure in PL/SQL Block: ",
    "Deleting a Standalone Procedure: ",
    "PL/SQL Program to demonstrate the Procedures by using IN Operator.",
    " Program to demonstrate the Procedures by using OUT Operator ",
    "Program to demonstrate the Procedures by using IN, OUT Operator ",
    " creating a Function",
    "Implicit Cursors ",
    "Explicit Cursors",
    "\n\nTASK-11\n\nTriggers in PL/SQL ",
    "creating Triggers"
]);
var DBMSanswers = [
    "a.CREATE TABLE Student (" +
    "sid INT PRIMARY KEY, " +
    "sname VARCHAR(255) NOT NULL, " +
    "sage INT, " +
    "branch VARCHAR(255), " +
    "cgpa FLOAT, " +
    "sdob DATE" +
    ");\n\n b." +
    "CREATE TABLE Course (" +
    "cid INT PRIMARY KEY, " +
    "cname VARCHAR(255) NOT NULL, " +
    "duration INT" +");",   
    "a.DESCRIBE Student;\n\nb."+"DESCRIBE Course;",
    "ALTER TABLE Student ADD COLUMN contact_no VARCHAR(15);",
    "INSERT INTO Student VALUES (1, 'John', 20, 'Computer Science', 3.5, '1995-05-10', '1234567890');\n\n"+"INSERT INTO Course VALUES (101, 'Mathematics', 4);",
    "a.SELECT * FROM Student;\n\nb."+"SELECT * FROM Course;",
    "a.UPDATE Student SET sage = 21 WHERE sid = 1;\n\n b."+"UPDATE Course SET duration = 5 WHERE cid = 101;",
    "UPDATE Student SET sname = 'James' WHERE sdob = '1998-09-19';",
    "ALTER TABLE Student DROP COLUMN sdob;",
    "ALTER TABLE Course ADD PRIMARY KEY (cid);",
    "ALTER TABLE Student CHANGE COLUMN branch s_stream VARCHAR(255);",
    "1.INSERT INTO aimlb_students (sid, sname, branch) VALUES (101, 'Alice', 'Computer Science');\n\n"+"2.INSERT INTO aimlb_students (sid, sage, cgpa) VALUES (102, 25, 3.7);\n\n"+"3.INSERT INTO aimlb_students (branch, sid, sname) VALUES ('Electrical Engineering', 103, 'Bob');",
    "SELECT * FROM aimlb_students WHERE sage > 30;",
    "DROP TABLE Course;",
    "sp_rename 'Student', 'aimlb_students';",
    "ALTER TABLE aimlb_students MODIFY COLUMN sage REAL;",
    "UPDATE aimlb_students SET sage = NULL WHERE sid = 101;",
    "ALTER TABLE aimlb_students DROP CONSTRAINT aimlb_students_pk;",
    "ALTER TABLE aimlb_students MODIFY COLUMN sname VARCHAR(30);",
    "ALTER TABLE aimlb_students ADD COLUMN Grade CHAR(1);",
    "UPDATE aimlb_students SET Grade = 'A' WHERE cgpa >= 9;",
    "UPDATE aimlb_students SET Grade = 'B' WHERE cgpa < 9 AND cgpa >= 8;",
    "UPDATE aimlb_students SET Grade = 'C' WHERE cgpa < 8;",
    "UPDATE aimlb_students SET cgpa = cgpa + 0.5;",
    "DELETE * FROM aimlb_students WHERE cgpa < 6;",
    "DELETE * FROM Course;",
    "CREATE TABLE Student (sid INT PRIMARY KEY, sname VARCHAR(255) NOT NULL, sage INT, branch VARCHAR(255), cgpa FLOAT, sdob DATE);\n"+"CREATE TABLE Course (cid INT PRIMARY KEY, cname VARCHAR(255) NOT NULL, duration INT);",
    "ALTER TABLE aimlb_students ADD COLUMN contact_no VARCHAR(15);\n"+"ALTER TABLE aimlb_students ADD COLUMN Grade CHAR(1);",
    "INSERT INTO aimlb_students VALUES (1, 'John', 20, 'Computer Science', 3.5, '1995-05-10', '1234567890', NULL);"+"INSERT INTO Course VALUES (101, 'Mathematics', 4);",
    "UPDATE aimlb_students SET sage = 21 WHERE sid = 1;",
    "UPDATE aimlb_students SET sname = 'James' WHERE sdob = '1998-09-19';",
    "ALTER TABLE aimlb_students DROP COLUMN sdob;",
    "ALTER TABLE Course ADD PRIMARY KEY (cid);",
    "sp_rename 'Student', 'aimlb_students';",
    "ALTER TABLE aimlb_students MODIFY COLUMN sage REAL;",
    "UPDATE aimlb_students SET sage = NULL WHERE sid = 1;",
    "ALTER TABLE Course DROP CONSTRAINT aimlb_students_pk;",
    "UPDATE aimlb_students SET Grade = 'A' WHERE cgpa >= 9;",
    "UPDATE aimlb_students SET Grade = 'B' WHERE cgpa < 9 AND cgpa >= 8;",
    "UPDATE aimlb_students SET cgpa = cgpa + 0.5;",
    "DELETE FROM aimlb_students WHERE cgpa < 6;",
    "CREATE TABLE Employee (emp_id INT PRIMARY KEY, emp_name VARCHAR(255), job_name VARCHAR(255), manager_id INT, hire_date DATE, salary FLOAT, commision FLOAT, dept_id INT);\n"+"CREATE TABLE Department (dept_id INT PRIMARY KEY, dep_name VARCHAR(255), dep_location VARCHAR(255));\n"+"CREATE TABLE Sailors (sid INT PRIMARY KEY, sname VARCHAR(255), rating INT, age INT);\n"+"CREATE TABLE Boats (bid INT PRIMARY KEY, bname VARCHAR(255), color VARCHAR(255));\n"+"CREATE TABLE Reserves (sid INT, bid INT, day DATE, PRIMARY KEY (sid, bid, day));\n"+"\n\n insert given values as shown ,these are just examples do it as in your exam\n\nINSERT INTO Employee VALUES (1, 'John Doe', 'Manager', NULL, '2022-01-01', 50000, 0.05, 101);\n"+"INSERT INTO Department VALUES (101, 'HR', 'New York');\n"+"INSERT INTO Sailors VALUES (1, 'Alice', 5, 25);\n"+"INSERT INTO Boats VALUES (1, 'Boat1', 'Blue');\n"+"INSERT INTO Reserves VALUES (1, 1, '2022-01-15');\n",
    "SELECT DISTINCT job_name FROM Employee;",
    "SELECT emp_name, manager_id FROM Employee;",
    "SELECT emp_name, salary * 1.15 AS Increased_sal FROM Employee;",
    "SELECT emp_name + '&' + job_name AS EmployeeAndJob FROM Employee;",
    "SELECT emp_name, LEN(emp_name) AS NameLength FROM Employee;",
    "SELECT * FROM Employee WHERE dept_id = 2001;",
    "SELECT * FROM Employee WHERE dept_id IN (2001, 1001);",
    "SELECT * FROM Employee WHERE dept_id NOT IN (2001);",
    "SELECT emp_name, salary * 1.25 AS Increased_salary FROM Employee WHERE salary > 3000;",
    "SELECT * FROM Employee WHERE salary BETWEEN 1300 AND 2000;",
    "SELECT * FROM Employee WHERE hire_date < '1991-01-01';",
    "SELECT * FROM Employee WHERE job_name = 'Salesman' AND salary > 1500;",
    "SELECT * FROM Employee WHERE dept_id IN (1001, 3001);",
    "SELECT * FROM Employee WHERE manager_id IS NULL;",
    "SELECT * FROM Employee WHERE dep_location = 'SYDNEY';",
    "SELECT emp_name + ' works_for ' + ISNULL((SELECT emp_name FROM Employee AS M WHERE M.emp_id = E.manager_id), 'No Manager') AS EmployeeAndManager FROM Employee AS E;",
    "SELECT emp_name FROM Employee WHERE emp_name LIKE 'A_____';",
    "SELECT * FROM Employee WHERE emp_name LIKE '__A__';",
    "SELECT emp_name FROM Employee WHERE emp_name LIKE 'M%E%';",
    "SELECT emp_name, job_name, salary FROM Employee WHERE emp_name LIKE 'A%S';",
    "SELECT * FROM Employee ORDER BY salary ASC;",
    "SELECT * FROM Employee ORDER BY dept_id ASC, job_name DESC;",
    "SELECT DISTINCT job_name FROM Employee ORDER BY job_name DESC;",
    "SELECT emp_name, emp_id, dept_id, salary FROM Employee WHERE job_name = 'Clerk' AND salary > 900 ORDER BY salary DESC;",
    "SELECT AVG(salary) AS AvgSalary FROM Employee WHERE dept_id = 1001;",
    "SELECT AVG(salary) AS AvgSalary FROM Employee WHERE job_name = 'Salesman';",
    "SELECT COUNT(DISTINCT job_name) AS NumJobs FROM Employee;",
    "SELECT MIN(salary) AS LowestSalary FROM Employee WHERE dept_id = 3001;",
    "SELECT emp_name, salary * 12 AS ANNUAL_SAL FROM Employee WHERE job_name = 'Manager';",
    "SELECT 'Total Salaries' AS StatType, SUM(salary) AS TotalSalaries FROM Employee UNION ALL " +"SELECT 'Maximum Salary' AS StatType, MAX(salary) AS MaximumSalary FROM Employee UNION ALL " +"SELECT 'Minimum Salary' AS StatType, MIN(salary) AS MinimumSalary FROM Employee UNION ALL " +"SELECT 'Average Salary' AS StatType, AVG(salary) AS AverageSalary FROM Employee;",
    "SELECT 'Maximum Salary' AS StatType, MAX(salary) AS MaximumSalary FROM Employee WHERE dept_id IN (1001, 3001) UNION ALL " +"SELECT 'Minimum Salary' AS StatType, MIN(salary) AS MinimumSalary FROM Employee WHERE dept_id IN (1001, 3001);",
    "SELECT emp_name, job_name, salary * 12 AS ANNUAL_SAL, dept_id FROM Employee WHERE salary * 12 > 35000;",
    "SELECT sname, age FROM Sailors;",
    "SELECT * FROM Sailors WHERE rating > 7;",
    "SELECT DISTINCT s.sname FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 103;",
    "SELECT s.sname, b.color FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE s.sid = 22;",
    "SELECT DISTINCT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'Red';",
    "SELECT DISTINCT s.sname FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'Red';",
    "SELECT DISTINCT b.color FROM Boats b JOIN Reserves r ON b.bid = r.bid JOIN Sailors s ON r.sid = s.sid WHERE s.sname = 'Lubber';",
    "SELECT DISTINCT s.sname FROM Sailors s JOIN Reserves r ON s.sid = r.sid;",
    "SELECT age FROM Sailors WHERE sname LIKE 'B_%B' AND LEN(sname) >= 3;",
    "CREATE TABLE emp (eid INT PRIMARY KEY, ename VARCHAR(255), category CHAR(1) CHECK (category IN ('A', 'B', 'C', 'D', 'E')), did CHAR(2) DEFAULT '01');",
    "SELECT * FROM Sailors WHERE rating > (SELECT rating FROM Sailors WHERE sname = 'HORATIO');",
    "SELECT * FROM Sailors WHERE rating > ALL (SELECT rating FROM Sailors WHERE sname = 'HORATIO');",
    "SELECT DISTINCT s.sname FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('Red', 'Green');",
    "SELECT DISTINCT s.sname FROM Sailors s JOIN Reserves r1 ON s.sid = r1.sid JOIN Boats b1 ON r1.bid = b1.bid JOIN Reserves r2 ON s.sid = r2.sid JOIN Boats b2 ON r2.bid = b2.bid WHERE b1.color = 'Red' AND b2.color = 'Green';",
    "SELECT DISTINCT s.sname FROM Sailors s JOIN Reserves r1 ON s.sid = r1.sid JOIN Boats b1 ON r1.bid = b1.bid WHERE b1.color = 'Red' AND s.sname NOT IN (SELECT s2.sname FROM Sailors s2 JOIN Reserves r2 ON s2.sid = r2.sid JOIN Boats b2 ON r2.bid = b2.bid WHERE b2.color = 'Blue');",
    "SELECT rating, MIN(age) AS YoungestAge FROM Sailors GROUP BY rating;",
    "SELECT rating, MIN(age) AS YoungestEligibleAge FROM Sailors WHERE age >= 18 GROUP BY rating HAVING COUNT(*) >= 2;",
    "SELECT b.bname, COUNT(r.sid) AS NumReservations FROM Boats b LEFT JOIN Reserves r ON b.bid = r.bid WHERE b.color = 'Red' GROUP BY b.bname;",
    "SELECT * FROM Employee WHERE manager_id IS NULL;",
    "SELECT * FROM Employee WHERE manager_id IS NOT NULL;",
    "SELECT * FROM Employee WHERE dept_id != 3001 AND job_name != 'Salesman';",
    "SELECT DISTINCT s.sname FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'Red';",
    "SELECT DISTINCT s.sname FROM Sailors s WHERE EXISTS (SELECT 1 FROM Reserves r WHERE s.sid = r.sid AND r.bid = 103);",
    "SELECT DISTINCT s.sname FROM Sailors s WHERE NOT EXISTS (SELECT 1 FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE s.sid = r.sid AND b.color = 'Red');",
    "SELECT DISTINCT s.sname FROM Sailors s WHERE NOT EXISTS (SELECT 1 FROM Reserves r WHERE s.sid = r.sid);",
    "SELECT rating, MIN(age) AS YoungestEligibleAge FROM Sailors WHERE age >= 18 GROUP BY rating;",
    "SELECT rating, MIN(age) AS YoungestEligibleAge FROM Sailors WHERE age >= 18 GROUP BY rating HAVING COUNT(*) >= 2;",
    "SELECT DISTINCT s.sname FROM Sailors s JOIN Reserves r1 ON s.sid = r1.sid JOIN Reserves r2 ON s.sid = r2.sid WHERE r1.bid <> r2.bid;",
    "SELECT * FROM Employee WHERE manager_id IS NULL;",
    "SELECT * FROM Employee WHERE manager_id IS NOT NULL;",
    "SELECT * FROM Employee WHERE dept_id != 2001;",
    "SELECT * FROM Employee WHERE dept_id != 3001 AND age >= 36;",
    "SELECT * FROM Customer LEFT OUTER JOIN Purchase ON Customer.cid = Purchase.cid WHERE Purchase.pid IS NULL;",
    "SELECT * FROM Customer RIGHT OUTER JOIN Purchase ON Customer.cid = Purchase.cid WHERE Customer.cid IS NULL;",
    "SELECT * FROM Customer FULL OUTER JOIN Purchase ON Customer.cid = Purchase.cid WHERE Customer.cid IS NULL OR Purchase.pid IS NULL;",
    "DECLARE\n"+ "   num1 NUMBER := 10;\n"+"    num2 NUMBER := 20;\n"+"    num3 NUMBER := 15;\n"+ "   max_num NUMBER;\n"+"BEGIN\n"+  "  IF num1 >= num2 AND num1 >= num3 THEN\n"+ "       max_num := num1;\n"+"    ELSIF num2 >= num1 AND num2 >= num3 THEN\n"+  "      max_num := num2;\n"+ "   ELSE\n"+"        max_num := num3;\n"+    "END IF;\n"+ "   DBMS_OUTPUT.PUT_LINE('Maximum Number: ' || max_num);\n"+"END;\n"+"/\n",
    "DECLARE\n    num NUMBER := 15;\nBEGIN\n    IF MOD(num, 2) = 0 THEN\n        DBMS_OUTPUT.PUT_LINE(num || ' is an even number.');\n    ELSE\n        DBMS_OUTPUT.PUT_LINE(num || ' is an odd number.');\n    END IF;\nEND;\n/\n",
    "DECLARE\n    n NUMBER := 10;\nBEGIN\n    FOR i IN 1..n LOOP\n        DBMS_OUTPUT.PUT_LINE(i);\n    END LOOP;\nEND;\n/\n\n",
    "DECLARE\n    n NUMBER := 100;\nBEGIN\n    FOR i IN 1..n LOOP\n        IF MOD(i, 2) <> 0 THEN\n            DBMS_OUTPUT.PUT_LINE(i);\n        END IF;\n    END LOOP;\nEND;\n/\n",
    "DECLARE\n    n NUMBER := 10;\n    sum NUMBER := 0;\nBEGIN\n    FOR i IN 1..n LOOP\n        IF MOD(i, 2) = 0 THEN\n            sum := sum + i;\n        END IF;\n    END LOOP;\n\n    DBMS_OUTPUT.PUT_LINE('Sum of even numbers: ' || sum);\nEND;\n/\n",
    "DECLARE\n    num NUMBER := 5;\nBEGIN\n    FOR i IN 1..10 LOOP\n        DBMS_OUTPUT.PUT_LINE(num || ' * ' || i || ' = ' || num * i);\n    END LOOP;\nEND;\n/\n\n",
    "DECLARE\n    num NUMBER := 12345;\n    digit_count NUMBER := 0;\nBEGIN\n    WHILE num > 0 LOOP\n        num := TRUNC(num / 10);\n        digit_count := digit_count + 1;\n    END LOOP;\n\n    DBMS_OUTPUT.PUT_LINE('Number of digits: ' || digit_count);\nEND;\n/\n",
    "DECLARE\n    num NUMBER := 12345;\n    digit_sum NUMBER := 0;\nBEGIN\n    WHILE num > 0 LOOP\n        digit_sum := digit_sum + MOD(num, 10);\n        num := TRUNC(num / 10);\n    END LOOP;\n\n    DBMS_OUTPUT.PUT_LINE('Sum of digits: ' || digit_sum);\nEND;\n/\n",
    "Syntax for creating a Procedure \nCREATE [OR REPLACE] PROCEDURE procedure_name \n[(parameter_name [IN | OUT | IN OUT] type [, ...])] \n{IS | AS} \nBEGIN \n < procedure_body > \nEND [procedure_name]; \nExample: \nCREATE OR REPLACE PROCEDURE greetings \nAS \nBEGIN \n dbms_output.put_line('Hello World!'); \nEND; \n/ \nTo execute the Procedure \nEXECUTE greetings; \nOR \nEXEC greetings; \n",
    "BEGIN \n greetings; \nEND; \n/ \n\n",
    "Syntax: \nDROP PROCEDURE procedure-name; \nExample: \nDROP PROCEDURE greetings;\n",
    "Example 1: \ncreate or replace procedure proc1(s in varchar) \n is \n begin \n dbms_output.put_line('Hello '||s); \n end; \n / \nSQL>exec proc1('Hari'); \nExample 2: \nCREATE OR REPLACE PROCEDURE addition(a IN number, b IN number) IS \nc number; \nBEGIN \n c := a+b; \n dbms_output.put_line('Sum of two nos= '|| c); \nEND addition; \n/ \n--Calling a Procedure with arguments from a PL/SQL block \nDECLARE \n x number; \n y number; \nBEGIN \n x := &x; \n y := &y; \n addition(x,y); \nEND; \n/ \n\n",
    "create or replace procedure proc2(x out varchar2) is \n begin \n x:='Hari Shankar'; \n dbms_output.put_line('Welcome '||x); \n end; \n / \n--Receiving a parameter from Procedure to PL/SQL Block \n declare \n temp varchar2(20); \n begin \n proc2(temp); \n dbms_output.put_line('output is '||temp); \n end; \n / \n\n",
    "DECLARE \n a number; \n b number; \n c number; \nPROCEDURE findMin(x IN number, y IN number, z OUT number) IS \nBEGIN \n IF x < y THEN \n z:= x; \n ELSE \n z:= y; \n END IF; \nEND; \nBEGIN \n a:= 23; \n b:= 45; \n  findMin(a, b, c); \n dbms_output.put_line(' Minimum of (23, 45) : ' || c); \nEND; \n/\n\n",
    "Syntax for creating a Function:\nCREATE [OR REPLACE] FUNCTION function_name \n[(parameter_name [IN | OUT | IN OUT] type [, ...])] \nRETURN return_datatype \n{IS | AS} \nBEGIN \n -- PL/SQL subprogram body; \nEXCEPTION \n -- Exception Handling block ; \nEND [function_name]; \nExample 1: \ncreate or replace function tot1 \nreturn number is \n total number:=0; \n begin \n select count(*) into total from sailors; \n return total; \n end; \n / \n--Calling Function in PL/SQL Block \ndeclare \nc number(2); \nbegin \nc:=tot1(); \ndbms_output.put_line('total number of sailors: '||c); \nend; \n/\nExample 2: \n-- Create a function with two input parameters \nCREATE OR REPLACE FUNCTION concat_strings (str1 IN VARCHAR2,str2 IN \nVARCHAR2) \nRETURN VARCHAR2 \nIS \n -- Declare a variable to store the concatenated result \n result VARCHAR2(100); \nBEGIN \n -- Concatenate the two input strings \n result := str1 || ' ' || str2; \n -- Return the concatenated result \n RETURN result; \nEND concat_strings; \n/ \nDECLARE \n result_str VARCHAR2(100); \nBEGIN \n -- Call the function with two strings \n result_str := concat_strings('Hari', 'Shankar'); \n DBMS_OUTPUT.PUT_LINE('The concatenated string is: ' || result_str); \nEND; \n/ \nExample 3: \nThe following program calculates the factorial of a given number by calling itself recursively \nDECLARE \nnum number; \nfactorial number;\nCREATE OR REPLACE FUNCTION fact(x number) RETURN number \nIS \nf number; BEGIN \nIF x=0 THEN f := 1; \nELSE \nf := x * fact(x-1); END IF; \nRETURN f; \nEND; \nBEGIN \nnum:= &num; \nfactorial := fact(num); \ndbms_output.put_line(' Factorial '|| num || ' is ' || factorial); END; \n/\n",
    "Implicit cursors are automatically created by Oracle whenever an SQL statement is executed, \nwhen there is no explicit cursor for the statement. \nIn PL/SQL, you can refer to the most recent implicit cursor as the SQL cursor, which always \nhas attributes such as %FOUND, %NOTFOUND, %ISOPEN and %ROWCOUNT. \nDECLARE \n total_rows number(2); \nBEGIN \n UPDATE employees \n SET salary = salary + 500; \n IF sql%notfound THEN \n dbms_output.put_line('no employees selected');\n ELSIF sql%found THEN \n total_rows := sql%rowcount; \n dbms_output.put_line( total_rows || ' employees selected '); \n END IF; \nEND; \n/\n",
    "Explicit cursors are programmer-defined cursors for gaining more control over the context \narea. An explicit cursor should be defined in the declaration section of the PL/SQL Block. It \nis created on a SELECT Statement which returns more than one row. \nExample \nDECLARE \n e_id employees.emp_id%type; \n e_name employees.emp_name%type;\n  e_job employees.job_name%type; \n CURSOR e_employees is \n SELECT emp_id, emp_name, job_name FROM employees; \nBEGIN \n OPEN e_employees; \n LOOP \n FETCH e_employees into e_id, e_name, e_job; \n EXIT WHEN e_employees%notfound; \n dbms_output.put_line(e_id || ' ' || e_name || ' ' || e_job); \n END LOOP; \n CLOSE e_employees; \nEND; \n/ \n",
    "Triggers in oracle are blocks of PL/SQL code which oracle engine can execute automatically\nbased on some action or event.\nThese events can be:\n1 DDL statements (CREATE, ALTER, DROP, TRUNCATE)\n2 DML statements (INSERT, SELECT, UPDATE, DELETE)\n3 Database operation like connecting or disconnecting to oracle (LOGON,\nLOGOFF, SHUTDOWN)\nTriggers are automatically and repeatedly called upon by oracle engine on satisfying\ncertain condition. Triggers can be activated or deactivated depending on the requirements.\nIf triggers are activated, then they are executed implicitly by oracle engine and if triggers\nare deactivated then they are executed explicitly by oracle engine.\nWhenever a trigger is created, it contains the following three sequential parts:\na. Triggering Event or Statement: The statements due"+" to which a trigger occurs is\ncalled triggering event or statement. Such statements can be DDL statements,\nDML statements or any database operation, executing which gives rise to a trigger.\nb. Trigger Restriction: The condition or any limitation applied on the trigger is\ncalled trigger restriction. Thus, if such a condition is TRUE then trigger occurs\notherwise it does not occur.\nc. Trigger Action: The body containing the executable statements that is to be\nexecuted when trigger occurs that is with the execution of Triggering statement\nand upon evaluation of Trigger restriction as True is called Trigger Action.\nTriggers can be classified into three categories:\na. Level Triggers\nb. Event Triggers\nc. Timing Triggers\nwhich are further divided into different parts.\n\xef\x83\x98 There are 2 different types of level triggers, they are:\n1. ROW LEVEL TRIGGERS\nIt fires for every record that got affected with the execution of DML statements\nlike INSERT, UPDATE, DELETE etc.\nIt always uses a FOR EACH ROW clause in a triggering statement.\n2. STATEMENT LEVEL TRIGGERS\nIt fires once for each statement that is executed\n\n->There are 3 different types of event triggers, they are:\n1. DDL EVENT TRIGGER\nIt fire"+"s with the execution of every DDL statement (CREATE, ALTER, DROP,\nTRUNCATE).\n2. DML EVENT TRIGGER\nIt fires with the execution of every DML statement (INSERT, UPDATE,\nDELETE).\n3. DATABASE EVENT TRIGGER\nIt fires with the execution of every database operation which can be LOGON,\nLOGOFF, SHUTDOWN, SERVERERROR etc.\n->There are 2 different types of timing triggers, they are:\n1. BEFORE TRIGGER\nIt fires before executing DML statement.\nTriggering statement may or may not executed depending upon the before\ncondition block.\n2. AFTER TRIGGER\nIt fires after executing DML statement. \n",
    "Syntax for creating Triggers\nCREATE OR REPLACE TRIGGER trigger_name\n{BEFORE | AFTER | INSTEAD OF} {INSERT | UPDATE | DELETE}\nON table_name\n[REFERENCING {OLD AS old | NEW AS new}]\n[FOR EACH ROW]\nDECLARE\n -- Declaration section for local variables\nBEGIN\n -- Trigger body: PL/SQL code that defines the trigger behavior\nEND;\n/ \n\n"];
answers.Add("DBMSanswers", DBMSanswers);



subjects.Add("PROLOG", [
    "Read a value and print it on the screen",
    "Implement relational operators",
    "Logical operators and, or, and not to build more complex queries and rules.",
    "To read two values from the user and find the biggest of those two numbers",
    "To read a value from the user and determine whether it is even or odd ",
    "To read a temperature value in degrees Celsius from the user and convert it to degrees Fahrenheit find out whether the temperature is freezing or not",
    "Factorial of a number",
    "Fibonacci series",
    "Student grades",
    "Lists and operations on list",
    "Sum of Elements in a List",
    "Reverse a List",
    " Find the Maximum Element in a List",
    "Check if a List is Palindromic",
    "Remove Duplicates from a List",
    "Check if a List is Sorted",
    " Split a List into Even and Odd Elements",
    "Find the Intersection of Two Lists",
    "Check if a List is a Sublist",
    "Flatten a Nested List",
    "Rotate a List to the right",
    " Split a List at a Given Position",
    "Remove an Element from a List",
    "Insert an Element at a Specific Position in a List",
    " Remove Consecutive Duplicates from a List",
    "Program to display 10 numbers",
    "Factorial Calculation with Cut",
    "Find the maximum value in a list.",
    "GCD of two numbers",
    "LCM using GCD",
    "Prime Number",
    "program demonstrates a recursive binary search in a sorted list.",
    "Monkey Banana Problem",
    "Water Jug Problem",
    "Medical Diagnosis Program",
    "Queens Problem",
    "Travelling Salesperson Problem (TSP)",
    "Reading and Writing Files",
    "Counting Lines in a File",
    "Copying Content from One File to Another",
    "Searching for a Word in a File",
    "Appending Data to a File"
]);
var PROLOGanswers = [
    "\nread_value(Value) :-\n write('Enter a value: '),\n read(Value).\n\nprint_value(Value) :-\n write('You entered: '),\n write(Value),\n nl. % newline\n\nmain :-\n read_value(X),\n print_value(X).\n \n% Run the main program\n%:- main.\n",
    "\nnumber(5).\nnumber(10).\nnumber(3).\ngreater(X, Y) :- number(X), number(Y), X > Y.\nless(X, Y) :- number(X), number(Y), X < Y.\nequal(X, Y) :- number(X), number(Y), X =:= Y.\nnot_equal(X, Y) :- number(X), number(Y), X =\\= Y.\n\n",
    "\n% AND Operator (,) Example\n\nparent(john, mary).\nparent(john, jim).\nparent(mary, anne).\nparent(jane, emily).\n\nsibling(X, Y) :- parent(Z, X), parent(Z, Y), X \\= Y.\n\n% OR Operator (;) Example\n\nmammal(dog).\nmammal(cat).\nbird(sparrow).\nbird(eagle).\n\nmammal_or_bird(X) :- mammal(X) ; bird(X).\n\n% NOT Operator (\\+) Example\n\ngrade(john, 90).\ngrade(susan, 78).\ngrade(mike, 55).\ngrade(lisa, 88).\n\ndid_not_pass(Student) :- grade(Student, Score), Score < 60.\n\n",
    "\n% Predicate to read two values from the user\nread_two_values(Value1, Value2) :-\n write('Enter the first value: '),\n read(Value1),\n write('Enter the second value: '),\n read(Value2).\n\n% Predicate to find the maximum of two numbers\nmax(X, Y, X) :- X >= Y.\nmax(X, Y, Y) :- X < Y.\n\nmain :-\n read_two_values(X, Y),\n max(X, Y, Max),\n write('The biggest number is: '),\n write(Max),\n nl. % newline\n\n % Run the main program\n% :- main.\n\n",
    "\n% Predicate to read a value from the user\nread_value(Value) :-\n write('Enter a value: '),\n read(Value).\n\n\n% Predicate to check if a number is even\nis_even(Number) :-\n 0 is Number mod 2.\n\n\n% Predicate to check if a number is odd (not even)\nis_odd(Number) :-\n \\+ is_even(Number).\n\nmain :-\n read_value(X),\n (is_even(X) ->\n write(X), write(' is even.');\n write(X), write(' is odd.')\n ),\n nl.\n\n% Run the main program\n%:- main \n\n",
    "\n% Predicate to read a temperature in degrees Celsius from the user\nread_celsius(Celsius) :-\n write('Enter temperature in degrees Celsius: '),\n read(Celsius).\n\n% Predicate to convert degrees Celsius to degrees Fahrenheit\ncelsius_to_fahrenheit(Celsius, Fahrenheit) :-\n Fahrenheit is (Celsius * 9/5) + 32.\n\n % Predicate to check if the temperature is freezing (below 32 degrees Fahrenheit)\nis_freezing(Fahrenheit) :-\n Fahrenheit < 32.\n\n main :-\n read_celsius(Celsius),\n celsius_to_fahrenheit(Celsius, Fahrenheit),\n write('Temperature in degrees Fahrenheit: '),\n write(Fahrenheit),\n nl, % newline\n (is_freezing(Fahrenheit) ->\n write('The temperature is freezing.');\n write('The temperature is not freezing.')\n ),\n nl.\n\n\n% Run the main program\n%:- main.\n\n",
    "\nfactorial(0, 1).\nfactorial(N, Result) :- N > 0, N1 is N - 1,\nfactorial(N1, Result1),\nResult is N * Result1.\n\n",
    "\nfib(0, 0).\nfib(1, 1).\nfib(N, Result) :- N > 1,\nN1 is N - 1,\nN2 is N - 2,\nfib(N1, Result1),\nfib(N2, Result2),\nResult is Result1 + Result2.\n\n",
    "\nstudent(1, 'Alice').\nstudent(2, 'Bob').\nstudent(3, 'Charlie').\ngrade(1, 90).\ngrade(2, 85).\ngrade(3, 75).\n\naverage_grade(StudentID, Average) :- student(StudentID, _),\nfindall(Grade, grade(StudentID, Grade), Grades),\nlength(Grades, NumGrades),\nsum_list(Grades, Sum),\nAverage is Sum / NumGrades.\n\n%Run the main program \n%average_grade(1, Average).\n\n",
    "\n\n%Appending Elements to a List\nappend([1, 2, 3], [4], Result),\nwrite(Result).\n\n%Prepending an Element to a List\nMyList = [4 | [1, 2, 3]].\n\n%Concatenating Lists\nappend([1, 2], [3, 4], Result),\nwrite(Result).\n\n%Checking if an Element is in a List\nmember(3, [1, 2, 3, 4]).\n\n%Finding the Length of a List\nlength([1, 2, 3, 4], Length),\nwrite(Length).\n\n%Accessing Elements by Index\nnth0(2, [1, 2, 3, 4], Element),\nwrite(Element).\n\n%Splitting a List\nappend(Prefix, Suffix, [1, 2, 3, 4]).\n ",
    "\nsum_list([], 0).\nsum_list([Head|Tail], Sum) :-\n sum_list(Tail, TailSum),\n Sum is Head + TailSum.\n \n%Run the main program\n % sum_list([1, 2, 3, 4, 5], Sum).\n\n",
    "\nreverse_list([], []).\nreverse_list([Head|Tail], Reversed) :-\n reverse_list(Tail, RestReversed),\n append(RestReversed, [Head], Reversed).\n\n %Run the main program\n% reverse_list([1, 2, 3, 4, 5], Reversed).\n\n",
    "\nmax_list([X], X).\nmax_list([Head|Tail], Max) :-\n max_list(Tail, TailMax),\n (Head > TailMax -> Max = Head ; Max = TailMax).\n\n %Run the main program\n% max_list([3, 7, 1, 9, 4], Max).\n",
    "\nis_palindrome(List) :-\n reverse_list(List, List).\n\n % Reverse a List\nreverse_list([], []).\nreverse_list([Head|Tail], Reversed) :-\n reverse_list(Tail, RestReversed),\n append(RestReversed, [Head], Reversed).\n\n % Run the main program\n %is_palindrome([1, 2, 3, 2, 1]).\n \n",
    "\nremove_duplicates([], []).\n\nremove_duplicates([Head|Tail], Result) :-\n member(Head, Tail),\n remove_duplicates(Tail, Result).\n\nremove_duplicates([Head|Tail], [Head|Result]) :-\n \\+ member(Head, Tail),\n remove_duplicates(Tail, Result).\n\n %Run the main program\n%- remove_duplicates([1, 2, 2, 3, 4, 4, 5], Result).\n",
    "\nis_sorted([]).\nis_sorted([_]).\nis_sorted([X, Y | Rest]) :-\n X =< Y,\n is_sorted([Y | Rest]).\n\n %Run the main program\n %is_sorted([1, 2, 3, 4, 5]).\n \n",
    "\nsplit_even_odd([], [], []).\nsplit_even_odd([X | Rest], [X | Even], Odd) :-\n 0 is X mod 2,\n split_even_odd(Rest, Even, Odd).\nsplit_even_odd([X | Rest], Even, [X | Odd]) :-\n 1 is X mod 2,\n split_even_odd(Rest, Even, Odd).\n\n \n %Run the main program\n %split_even_odd([1, 2, 3, 4, 5], Even, Odd).\n",
    "\nintersection([], _, []).\nintersection([H1|T1], L2, [H1|Result]) :-\n member(H1, L2),\n intersection(T1, L2, Result).\nintersection([_|T1], L2, Result) :-\n intersection(T1, L2, Result).\n\n %Run the main program\n %intersection([1, 2, 3, 4], [3, 4, 5, 6], Result).\n",
    "\nsublist([], _).\nsublist([H|T], List) :-\n append(_, [H|Rest], List),\n sublist(T, Rest).\n \n%Run the main program\n %sublist([2, 3], [1, 2, 3, 4, 5]).\n",
    "\nflatten([], []).\nflatten([H|T], FlatList) :-\n flatten(H, FlatH),\n flatten(T, FlatT),\n append(FlatH, FlatT, FlatList).\nflatten(X, [X]) :- \\+ is_list(X).\n\n%Run the main program\n%flatten([1, [2, [3, 4], 5], 6], FlatList).\n\n",
    "\nrotate_right([], _, []).\nrotate_right(List, N, Rotated) :-\n length(List, Len),\n N1 is N mod Len,\n append(Suffix, Prefix, List),\n length(Prefix, N1),\n append(Prefix, Suffix, Rotated).\n\n %Run the main program\n %rotate_right([1, 2, 3, 4, 5], 2, Rotated).\n\n",
    "\nsplit_at(List, 0, [], List).\nsplit_at([H|T], N, [H|Prefix], Suffix) :-\n N > 0,\n N1 is N - 1,\n split_at(T, N1, Prefix, Suffix).\n \n %Run the main program\n%split_at([1, 2, 3, 4, 5], 3, Prefix, Suffix).\n\n",
    "\nremove_element(_, [], []).\nremove_element(X, [X|Tail], Result) :-\n remove_element(X, Tail, Result).\nremove_element(X, [Head|Tail], [Head|Result]) :-\n X \\= Head,\n remove_element(X, Tail, Result).\n %Run the main program\n %remove_element(3, [1, 2, 3, 4, 5], Result).\n\n",
    "\ninsert_at(Element, List, 0, [Element|List]).\ninsert_at(Element, [Head|Tail], Position, [Head|Result]) :-\n Position > 0,\n NewPosition is Position - 1,\n insert_at(Element, Tail, NewPosition, Result).\n\n%Run the main program\n%insert_at(3, [1, 2, 4, 5], 2, Result).\n\n",
    "\nremove_consecutive_duplicates([], []).\nremove_consecutive_duplicates([X], [X]).\nremove_consecutive_duplicates([X, X|T], Result) :-\n remove_consecutive_duplicates([X|T], Result).\nremove_consecutive_duplicates([X, Y|T], [X|Result]) :-\n X \\= Y,\n remove_consecutive_duplicates([Y|T], Result).\n\n %Run the main program\n% remove_consecutive_duplicates([1, 1, 2, 3, 3, 3, 4, 4, 5], Result).\n\n",
    "\ncount_to_10(10):-write(10),nl.\ncount_to_10(X):-\nwrite(X), nl,\nY is X + 1,\ncount_to_10(Y).\n\n",
    "\nfactorial(0, 1) :- !.\nfactorial(N, F) :-\n N > 0,\n N1 is N - 1,\n factorial(N1, F1),\n F is N * F1.\n\n",
    "\nmax_value([Max], Max) :- !.\nmax_value([Head | Tail], Max) :-\n max_value(Tail, MaxTail),\n Max is max(Head, MaxTail).\n%Run the main program\n%max_value([1, 5, 3, 8, 2], Result). \n\n",
    "\ngcd(X, 0, X) :- !.\ngcd(X, Y, GCD) :-\n Y > 0,\n Rem is X mod Y,\n gcd(Y, Rem, GCD).\n\n%Run the main program\n%gcd(5,6,GCD).\n\n",
    "\ngcd(X, 0, X) :- !.\ngcd(X, Y, GCD) :-\n Y > 0,\n Rem is X mod Y,\n gcd(Y, Rem, GCD).\nlcm(X, Y, LCM) :-\n gcd(X, Y, GCD),\n LCM is abs(X * Y) GCD.\n \n%Run the main program\n%lcm(5,6,LCM).\n\n",
    "\nis_prime(2) :- !.\nis_prime(N) :-\n N > 2,\n \\+ has_factor(N, 2).\nhas_factor(N, Factor) :-\n N mod Factor =:= 0, !.\nhas_factor(N, Factor) :-\n Factor * Factor < N,\n NextFactor is Factor + 1,\n has_factor(N, NextFactor).\n\nn%Run the main program\n%is_prime(7).\n\n",
    "\n% Base case: The element is found at the middle of the list.\nbinary_search([X|_], X) :- !.\n\n% Recursive rule for binary search.\nbinary_search(List, X) :-\n append(Left, [Mid|Right], List),\n X =< Mid,\n binary_search(Left, X).\nbinary_search(List, X) :-\n append(Left, [Mid|_], List),\n X > Mid,\n binary_search(Right, X).\n\n %Run the main program\n%binary_search([1, 3, 5, 7, 9], 5).\n\n\n",
    "\non(floor, monkey).\non(floor, box).\n\nin(room, monkey).\nin(room, box).\nin(room, banana).\n\nat(floor, banana).\nat(ceiling, banana).\n\nstrong(monkey).\ngrasp(monkey, banana).\nclimb(monkey, box).\npush(monkey, box):-\nstrong(monkey).\nunder(banana, box):-\npush(monkey, box).\n\ncan_reach(banana, monkey):-\n in(room, monkey),\n (at(floor, banana);\n at(ceiling, banana)),\n under(banana, box),\n climb(monkey, box).\n \ncan_get(banana, monkey):-\ncan_reach(banana, monkey),\ngrasp(monkey, banana).\n\n%Run the main Program \n %can_get(banana, monkey)\n",
    "\ninitial_state(jug(0, 0)).\nfinal_state(jug(Goal, _)).\n\naction(fill(Jug, Capacity), jug(_, J2), jug(Capacity, J2)) :-\n Jug = jug(J1, _),\n J1 < Capacity.\n\n action(fill(Jug, Capacity), jug(_, J2), jug(Capacity, J2)) :-\n Jug = jug(J1, _),\n J1 < Capacity.\n\n action(empty(Jug), jug(_, J2), jug(0, J2)) :-\n Jug = jug(_, J2),\n J2 > 0.\n\n action(empty(Jug), jug(J1, _), jug(J1, 0)) :-\n Jug = jug(J1, _),\n J1 > 0.\n\n action(pour(Jug1, Jug2), jug(J1, J2), jug(NewJ1, NewJ2)) :-\n Jug1 = jug(_, J2),\n Jug2 = jug(Capacity, _),\n J1 > 0,\n J2 < Capacity,\n Total is J1 + J2,\n (Total =< Capacity -> (NewJ1 = 0, NewJ2 = Total) ; (NewJ1 = Total -\nCapacity, NewJ2 = Capacity)).\n\naction(pour(Jug1, Jug2), jug(J1, J2), jug(NewJ1, NewJ2)) :-\n Jug1 = jug(J1, _),\n Jug2 = jug(_, Capacity),\n J2 > 0,\n J1 < Capacity,\n Total is J1 + J2,\n (Total =< Capacity -> (NewJ1 = Total, NewJ2 = 0) ; (NewJ1 = Capacity,\nNewJ2 = Total - Capacity)).\n\nsolve(State, _, []) :-\nfinal_state(State).\nsolve(State, Visited, [Action | Actions]) :-\n action(Action, State, NextState),\n \\+ member(NextState, Visited),\n solve(NextState, [NextState | Visited], Actions).\n\n% Entry point predicate for the water jug problem\nwater_jug_problem(Jug1, Jug2, Goal, Solution) :-\n initial_state(InitialState),\n solve(jug(Jug1, Jug2), [InitialState], Solution),\n final_state(jug(Goal, _)).\n\n %Run the main program\n %water_jug_problem(12, 8, 5, Solution).\n\n\n",
    "\n% Symptoms\nsymptom(fever).\nsymptom(cough).\nsymptom(sore_throat).\nsymptom(runny_nose).\n\n% Rules for Diagnosis\ndiagnose(cold) :-\n symptom(runny_nose),\n symptom(sore_throat),\n not(symptom(fever)),\n not(symptom(cough)).\n\n diagnose(flu) :-\n symptom(fever),\n symptom(cough),\n symptom(sore_throat),\n symptom(runny_nose).\ndiagnose(unknown).\n\ndiagnosis(X) :- diagnose(X), !, write('Patient has '), write(X), nl.\ndiagnosis(X) :- write('Diagnosis inconclusive for '), write(X), nl.\n\n%Run the main program\n%diagnosis(X).\n\n",
    "\nsafe(_, _, []).\nsafe(Row, Col, [X/Y | Others]) :-\n    Row =\\= X,\n    Col =\\= Y,\n    abs(Row - X) =\\= abs(Col - Y),\n    safe(Row, Col, Others).\n\nplace_queens(0, _, []).\nplace_queens(N, BoardSize, [Row/Col | Others]) :-\n    N > 0,\n    N1 is N - 1,\n    place_queens(N1, BoardSize, Others),\n    between(1, BoardSize, Col),\n    safe(Row, Col, Others).\n\nqueens(BoardSize, Solution) :-\n    place_queens(BoardSize, BoardSize, Solution).\n\n% To find a solution for the 4-Queens problem, you can query:\n% queens(4, Solution).\n\n",
"% Define the distance between cities\ndistance(city1, city2, 10).\ndistance(city1, city3, 15).\ndistance(city1, city4, 20).\ndistance(city2, city3, 35).\ndistance(city2, city4, 25).\ndistance(city3, city4, 30).\n\n% Generate all possible routes\npermute([], []).\npermute(List, [H|Perm]) :-\n    select(H, List, Rest),\n    permute(Rest, Perm).\n\n% Calculate the total distance of a route\ntotal_distance([_], 0).\ntotal_distance([City1, City2 | Rest], Distance) :-\n    distance(City1, City2, D),\n    total_distance([City2 | Rest], RestDistance),\n    Distance is D + RestDistance.\n\n% Find the optimal route\ntsp(ShortestRoute, ShortestDistance) :-\n    findall(Route, (permute([city1, city2, city3, city4], Route), Route = [city1 | _]), Routes),\n    findall(Distance, (member(Route, Routes), total_distance(Route, Distance)), Distances),\n    min_list(Distances, ShortestDistance),\n    nth0(Index, Distances, ShortestDistance),\n    nth0(Index, Routes, ShortestRoute).\n\n%Run in the main program\ntsp(Route, Distance).\n\n",
    "\n% Open a file for reading\nopen('example.txt', read, InStream),\n\n% Read a line from the file\nread_line_to_codes(InStream, Line),\n\n% Close the file\nclose(InStream),\n\n% Open a file for writing\nopen('output.txt', write, OutStream),\n% Write a term to the file\nwrite(OutStream, Line),\n% Close the file\nclose(OutStream).\n\n% Writing a list of terms to a File\n% write_to_file/2 writes a list of terms to a file\nwrite_to_file(FileName, Terms) :-\n open(FileName, write, OutStream),\n write_terms(OutStream, Terms),\n close(OutStream).\n\n % write_terms/2 writes a list of terms to a stream\nwrite_terms(_, []).\nwrite_terms(OutStream, [Term | Rest]) :-\n write(OutStream, Term), nl(OutStream),\n write_terms(OutStream, Rest).\n\n % To read lines from a file and print them\nread_file(FileName) :-\n open(FileName, read, InStream),\n read_lines(InStream),\n close(InStream).\n\n\n % read_lines/1 reads lines from a stream and prints them\nread_lines(InStream) :-\n repeat,\n read_line_to_codes(InStream, Line),\n (Line \\= end_of_file ->\n format('~s~n', [Line]),\n fail\n ;\n true\n ).\n\n \n %Run the main program\n %read_file('example.txt').\n \n\n\n",
    "\n% count_lines/2 counts the number of lines in a file\ncount_lines(FileName, LineCount) :-\n open(FileName, read, InStream),\n count_lines_aux(InStream, 0, LineCount),\n close(InStream).\n\n% count_lines_aux/3 auxiliary predicate to count lines\ncount_lines_aux(InStream, Acc, LineCount) :-\n read_line_to_codes(InStream, Line),\n (Line \\= end_of_file ->\n NewAcc is Acc + 1,\n count_lines_aux(InStream, NewAcc, LineCount)\n ;\n LineCount is Acc\n ).\n\n% Example usage: count_lines('example.txt', Count).\n\n",
    "\ncopy_file(SourceFile, DestinationFile) :-\n open(SourceFile, read, InStream),\n open(DestinationFile, write, OutStream),\n copy_stream_data(InStream, OutStream),\n close(InStream),\n close(OutStream).\n\n % copy_stream_data/2 copies data from one stream to another\ncopy_stream_data(InStream, OutStream) :-\n repeat,\n read_line_to_codes(InStream, Line),\n (Line \\= end_of_file ->\n write(OutStream, Line), nl(OutStream),\n fail\n ;\n true\n ).\n\n % Example usage: copy_file('source.txt', 'destination.txt').\n\n ",
    "\n% search_word/3 searches for a word in a file and returns the line numbers\nsearch_word(FileName, Word, LineNumbers) :-\n open(FileName, read, InStream),\n search_word_aux(InStream, Word, 1, [], LineNumbers),\n close(InStream).\n\n% search_word_aux/5 auxiliary predicate to search for a word\nsearch_word_aux(InStream, Word, LineNumber, Acc, LineNumbers) :-\nsearch_word_aux(InStream, Word, LineNumber, Acc, LineNumbers) :-\n49\n read_line_to_codes(InStream, Line),\n (Line \\= end_of_file ->\n (atom_codes(AtomLine, Line), sub_atom(AtomLine, _, _, _, Word) ->\n NewAcc = [LineNumber | Acc]\n ;\n NewAcc = Acc\n ),\n NewLineNumber is LineNumber + 1,\n search_word_aux(InStream, Word, NewLineNumber, NewAcc,\nLineNumbers)\n ;\n LineNumbers = Acc\n ).\n\n \n % Example usage: search_word('example.txt', 'Prolog', LineNumbers).\n\n \n ",
    "\n% append_to_file/2 appends data to an existing file\nappend_to_file(FileName, Data) :-\n open(FileName, append, OutStream),\n write(OutStream, Data), nl(OutStream),\n close(OutStream).\n \n% Example usage: append_to_file('example.txt', 'Appended line').\n\n "
];


answers.Add("PROLOGanswers", PROLOGanswers);

subjects.Add("JAVAForAimlACse", [
    "Operators task1A",
    "Student grade task 1B",
    "command line arguments 1C",
    "Constructor and method overloading task 2a",
    "type casting task 2B",
    "Use array se of integers and find the sum and average of the elements of that array in java",
    "Practice further programs on the usage of arrays in java",
    "Write a program to utilize both standard and custom packages. The program should reflect the usage of packages in a correct manner, along with the purpose of access modifiers.",
    "Write a program to use gc() method of both System and Runtime classes. Experiment with other methods of those classes.",
    "Write a program using the hierarchy of employees in a university",
    "Write a program to understand polymorphic invocation of methods,while overriding the methods. Use an employee base class and manager sub class; override the computeSalary() method to illustrate the concept.",
    "Develop an application that uses inheritance. Use the class Account and then subclass it into different account types. Then making use of Customer and Employee classes to develop the application to reflect the nature of banking operations. Use minimum operational sequence.",
    "Demonstrate the use of abstract classes. Write a Person abstract class and then subclass that into Student and Faculty classes. Use appropriate fields and methods.",
    "Write a program to demonstrate the usage of interfaces.",
   " Write a program to understand the full capability of String class.Implement as many methods as required. Consult API documentation to read through the methods.",
    "Write programs using StringBuffer and StringBuilder library classes.",
    "Write a program to demonstrate the usage of try and associated keywords. Introduce bugs into the program to raise exceptions and then catch and process them.",
    "Learn how to create and use custom exceptions.",
    "Using byte streams, write a program to both read from and write to files.",
    "Using FileReader and FileWriter, write a program to perform file copying and any other suitable operations.",
    "Write a Java Program that displays the number of characters, linesand words in a text file.",
    "Use the classes StringTokenizer, StringReader and StringWriter to write a program to find the capabilities of these classes.",
    "Write a program to demonstrate enumerations and usage of Assertions.",
    " Demonstrate assertions through simple programs.",
    "Write programs to illustrate the use of Thread class and Runnable interface.",
    "Write a program to show the assignment of thread priorities.",
    "Write a program to synchronize threads. Use Producer and Consumer problem to illustrate the concept."
]);


var JAVAanswersForAimlACse = [
    "\n        \npublic class OperatorDemo {\n    public static void main(String[] args) {\n        Comparison operators\n        int a = 5, b = 10;\n\n        System.out.println(\"Comparison Operators:\");\n        System.out.println(\"a == b: \" + (a == b));\n        System.out.println(\"a != b: \" + (a != b));\n        System.out.println(\"a < b: \" + (a < b));\n        System.out.println(\"a > b: \" + (a > b));\n        System.out.println(\"a <= b: \" + (a <= b));\n        System.out.println(\"a >= b: \" + (a >= b));\n\n        Arithmetic operators\n        int x = 15, y = 4;\n\n        System.out.println(\"\\nArithmetic Operators:\");\n        System.out.println(\"x + y: \" + (x + y));\n        System.out.println(\"x - y: \" + (x - y));\n        System.out.println(\"x * y: \" + (x * y));\n        System.out.println(\"x / y: \" + (x / y));\n        System.out.println(\"x % y: \" + (x % y));\n\n        Bitwise operators\n        int num1 = 5, num2 = 3;\n\n        System.out.println(\"\\nBitwise Operators:\");\n        System.out.println(\"num1 & num2: \" + (num1 & num2)); Bitwise AND\n        System.out.println(\"num1 | num2: \" + (num1 | num2)); Bitwise OR\n        System.out.println(\"num1 ^ num2: \" + (num1 ^ num2)); Bitwise XOR\n        System.out.println(\"~num1: \" + (~num1));             Bitwise NOT\n        System.out.println(\"num1 << 1: \" + (num1 << 1));     Left shift\n        System.out.println(\"num1 >> 1: \" + (num1 >> 1));     Right shift\n    }\n}\n\n",
    "\n\nimport java.util.Scanner;\n\npublic class GradeCheckerSwitch {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter the student\'s score: \");\n        int score = scanner.nextInt();\n\n        char grade = getGradeSwitch(score);\n\n        System.out.println(\"Grade: \" + grade);\n    }\n\n    public static char getGradeSwitch(int score) {\n        int range = score / 10;\n\n        switch (range) {\n            case 10:\n            case 9:\n                return \'A\';\n            case 8:\n                return \'B\';\n            case 7:\n                return \'C\';\n            case 6:\n                return \'D\';\n            default:\n                return \'F\';\n        }\n    }\n}\n\n\n\nUSING IF -ELSE\n\nimport java.util.Scanner;\n\npublic class GradeCheckerIfElse {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter the student\'s score: \");\n        int score = scanner.nextInt();\n\n        char grade = getGradeIfElse(score);\n\n        System.out.println(\"Grade: \" + grade);\n    }\n\n    public static char getGradeIfElse(int score) {\n        if (score >= 90 && score <= 100) {\n            return \'A\';\n        } else if (score >= 80 && score < 90) {\n            return \'B\';\n        } else if (score >= 70 && score < 80) {\n            return \'C\';\n        } else if (score >= 60 && score < 70) {\n            return \'D\';\n        } else if (score >= 0 && score < 60) {\n            return \'F\';\n        } else {\n            Handle invalid score (outside the range 0-100)\n            System.out.println(\"Invalid score. Please enter a score between 0 and 100.\");\n            return \'\\0\'; \'\\0\' is used to represent an undefined character\n        }\n    }\n}\n",
    "\nclass Comdargs{\npublic static void main(String[] args){\nSystem.out.println(args[0]+\" \"+args[1]);\nSystem.out.println(args[0]+args[1]);\n}\n}\n\n###IN THE COMMAND PROMPT AFTER JAVA COMDARGS GIVE YOUR COMMAND LINE ARRGUMENTS###\n\n",
    "\n        \n##Constructor overloading##\n\nclass T\n{\n    T()\n    {\n        System.out.println(\"0-args\");\n    }\n    T(int i)\n    {\n        System.out.println(\"1-args\");\n    }\n    T(int i,int j)\n    {\n        System.out.println(\"2-args\");\n    }\n    public static void main(String[] args)\n    {\n        System.out.println(\"constructor overloading\");\n        T t1=new T();\n        T t2=new T(10);\n        T t3=new T(20,30);\n    }\n}\n\n\n\n\n\n##Method overloading##\n\nclass MO {\n    static int add(int a, int b) {\n        return a + b;\n    }\n\n    static int add(int a, int b, int c) {\n        return a + b + c;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(add(11, 11));\n    }\n}\n",
    "\n\nclass Explicit\n{\n    public static void main(String[] args)\n    {\n        long l=99;\n        int i=(int)l;\n        System.out.println(\"long value =\"+l);\n        System.out.println(\"int value =\"+i);\n    }\n}\n\n",
    "\npublic class ArraySumAverage {\n    public static void main(String[] args) {\n        Predefined array of integers\n        int[] array = { 10, 20, 30, 40, 50 };\n\n        Calculate sum and average\n        int sum = 0;\n        for (int i = 0; i < array.length; i++) {\n            sum += array[i];\n        }\n        double average = (double) sum / array.length;\n\n        Output: Sum and Average\n        System.out.println(\"Sum of the elements: \" + sum);\n        System.out.println(\"Average of the elements: \" + average);\n    }\n}\n",
    "\n\npublic class ArrayOperations {\n    public static void main(String[] args) {\n        Initializing an array\n        int[] numbers = { 5, 12, 8, 3, 15 };\n\n        Accessing elements\n        System.out.println(\"Element at index 2: \" + numbers[2]);\n\n        Finding the length of the array\n        System.out.println(\"Length of the array: \" + numbers.length);\n\n        Modifying an element\n        numbers[1] = 20;\n\n        Printing the array\n        System.out.print(\"Modified array: \");\n        for (int i = 0; i < numbers.length; i++) {\n            System.out.print(numbers[i] + \" \");\n        }\n        System.out.println();\n\n        Finding the maximum element\n        int maxElement = numbers[0];\n        for (int i = 1; i < numbers.length; i++) {\n            if (numbers[i] > maxElement) {\n                maxElement = numbers[i];\n            }\n        }\n        System.out.println(\"Maximum element: \" + maxElement);\n\n        Finding the minimum element\n        int minElement = numbers[0];\n        for (int i = 1; i < numbers.length; i++) {\n            if (numbers[i] < minElement) {\n                minElement = numbers[i];\n            }\n        }\n        System.out.println(\"Minimum element: \" + minElement);\n\n        Iterating through the array to calculate the sum\n        int sum = 0;\n        for (int num : numbers) {\n            sum += num;\n        }\n        System.out.println(\"Sum of elements: \" + sum);\n    }\n}\n\n",
    "\n\npackage com.example.custom;\nimport java.util.ArrayList; Import ArrayList from java.util package\nclass CustomClass {\nvoid display() {\nSystem.out.println(\"Custom class in the custom package.\");\n}\n}\npublic class Main {\npublic static void main(String args[]) {\nArrayList list = new ArrayList<>(); Fix the typo in ArrayList declaration\nlist.add(\"hello\");\nlist.add(\"world\");\nSystem.out.println(\"ArrayList from java.util package: \" + list);\nCustomClass customObj = new CustomClass();\ncustomObj.display();\nAccessModifiersDemo demo = new AccessModifiersDemo();\ndemo.publicMethod();\ndemo.defaultMethod();\n}\n}\nclass AccessModifiersDemo {\npublic void publicMethod() {\nSystem.out.println(\"Public method can be accessed from anywhere.\");\n}\nvoid defaultMethod() {\nSystem.out.println(\"Default method can be accessed within the same package.\");\n}\n}\n\n\n",
    "\n\npublic classgc\n{\npublic static void main(String args[])\n{\nSystem.gc();\nSystem.out.println(\"garbage collection is required using system.gc()\");\nruntime.getruntime().gc();\nSystem.out.println(\"garbage collection is required using system.gc()\");\nSytsem.out.println(\"free menory:\"+runtime.getruntime() freememory()+\"bytes\");\nSystem.out.println(\"total memory:\"+runtime.getruntime().totalmemory()+\"bytes\");\nSystem.out.println(\"available processors\"+runtime.getruntime()available processors());\nruntime.getruntime().exit(0);\nSystem.out.println(\"this linewill not be executed\");\n}\n}\n\n",
    "\n\nEmployee class (base class)\nclass Employee {\n    private String name;\n    private int employeeId;\n\n    public Employee(String name, int employeeId) {\n        this.name = name;\n        this.employeeId = employeeId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getEmployeeId() {\n        return employeeId;\n    }\n\n    public void displayDetails() {\n        System.out.println(\"Employee ID: \" + employeeId);\n        System.out.println(\"Name: \" + name);\n    }\n}\n\nFaculty class (inherits from Employee)\nclass Faculty extends Employee {\n    private String department;\n    private String designation;\n\n    public Faculty(String name, int employeeId, String department, String designation) {\n        super(name, employeeId);\n        this.department = department;\n        this.designation = designation;\n    }\n\n    public String getDepartment() {\n        return department;\n    }\n\n    public String getDesignation() {\n        return designation;\n    }\n\n    @Override\n    public void displayDetails() {\n        super.displayDetails();\n        System.out.println(\"Department: \" + department);\n        System.out.println(\"Designation: \" + designation);\n    }\n}\n\nStaff class (inherits from Employee)\nclass Staff extends Employee {\n    private String role;\n\n    public Staff(String name, int employeeId, String role) {\n        super(name, employeeId);\n        this.role = role;\n    }\n\n    public String getRole() {\n        return role;\n    }\n\n    @Override\n    public void displayDetails() {\n        super.displayDetails();\n        System.out.println(\"Role: \" + role);\n    }\n}\n\nUniversityProgram class (main program)\npublic class UniversityProgram {\n    public static void main(String[] args) {\n        Creating instances of Faculty and Staff\n        Faculty facultyMember = new Faculty(\"John Doe\", 101, \"Computer Science\", \"Professor\");\n        Staff staffMember = new Staff(\"Jane Smith\", 201, \"Administrative Assistant\");\n\n        Displaying details of Faculty and Staff\n        System.out.println(\"Faculty Details:\");\n        facultyMember.displayDetails();\n        System.out.println();\n\n        System.out.println(\"Staff Details:\");\n        staffMember.displayDetails();\n    }\n}\n\n\n",
    "\n\nclass Employee {\n    private String name;\n    private double baseSalary;\n\n    public Employee(String name, double baseSalary) {\n        this.name = name;\n        this.baseSalary = baseSalary;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    Base implementation of computeSalary method\n    public double computeSalary() {\n        return baseSalary;\n    }\n}\nclass Manager extends Employee {\n    private double bonus;\n\n    public Manager(String name, double baseSalary, double bonus) {\n        super(name, baseSalary);\n        this.bonus = bonus;\n    }\n\n    Override computeSalary method to include bonus\n    @Override\n    public double computeSalary() {\n        Calling the base class method using super\n        double baseSalary = super.computeSalary();\n        return baseSalary + bonus;\n    }\n}\npublic class PolymorphicInvocationExample {\n    public static void main(String[] args) {\n        Polymorphic invocation using base class reference\n        Employee emp1 = new Employee(\"John Doe\", 50000.0);\n        System.out.println(\"Employee Salary: $\" + emp1.computeSalary());\n\n        Polymorphic invocation using subclass reference\n        Employee emp2 = new Manager(\"Jane Smith\", 60000.0, 10000.0);\n        System.out.println(\"Manager Salary: $\" + emp2.computeSalary());\n    }\n}\n\n",
    "\n\nAccount class (Base class)\nclass Account {\n private int accountNumber;\n private double balance;\n public Account(int accountNumber) {\n this.accountNumber = accountNumber;\n this.balance = 0.0;\n }\n public int getAccountNumber() {\n return accountNumber;\n }\n public double getBalance() {\n return balance;\n }\n public void deposit(double amount) {\n balance += amount;\n System.out.println(\"Deposited: $\" + amount);\n }\n public void withdraw(double amount) {\n if (amount <= balance) {\n balance -= amount;\n System.out.println(\"Withdrawn: $\" + amount);\n } else {\n System.out.println(\"Insufficient balance\");\n }\n }\n}\nSubclasses of Account\nclass SavingsAccount extends Account {\n Additional features specific to savings account\n public SavingsAccount(int accountNumber) {\n super(accountNumber);\n }\n}\nclass CheckingAccount extends Account {\n Additional features specific to checking account\n public CheckingAccount(int accountNumber) {\n super(accountNumber);\n }\n}\nCustomer class\nclass Customer {\n private String name;\n private Account account;\n public Customer(String name, Account account) {\n this.name = name;\n this.account = account;\n }\n public void deposit(double amount) {\n account.deposit(amount);\n }\n public void withdraw(double amount) {\n account.withdraw(amount);\n }\n public double checkBalance() {\n return account.getBalance();\n }\n}\nEmployee class\nclass Employee {\n private String name;\n public Employee(String name) {\n this.name = name;\n }\n public void processTransaction(Customer customer, double amount,\nString type) {\n if (type.equalsIgnoreCase(\"Deposit\")) {\n customer.deposit(amount);\n } else if (type.equalsIgnoreCase(\"Withdraw\")) {\n customer.withdraw(amount);\n } else {\n System.out.println(\"Invalid transaction type\");\n }\n }\n}\nMain class for testing\npublic class BankingApplication {\n public static void main(String[] args) {\n Create accounts for customers\n SavingsAccount savingsAccount = new SavingsAccount(1001);\n CheckingAccount checkingAccount = new CheckingAccount(2001);\n Create customers and link accounts\n Customer customer1 = new Customer(\"Alice\", savingsAccount);\n Customer customer2 = new Customer(\"Bob\", checkingAccount);\n Create bank employees\n Employee employee1 = new Employee(\"Eve\");\n Employee processing transactions for customers\n employee1.processTransaction(customer1, 1000, \"Deposit\");\n employee1.processTransaction(customer2, 500, \"Withdraw\");\n Checking customer balances after transactions\n System.out.println(\"Customer 1 Balance: $\" +\ncustomer1.checkBalance());\n System.out.println(\"Customer 2 Balance: $\" +\ncustomer2.checkBalance());\n }\n}\n\n",
    "\n\nAbstract class: Person\nabstract class Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public abstract void displayDetails();\n\n    public void greet() {\n        System.out.println(\"Hello, I am \" + name + \".\");\n    }\n}\n\nSubclass: Student\nclass Student extends Person {\n    private int studentId;\n\n    public Student(String name, int age, int studentId) {\n        super(name, age);\n        this.studentId = studentId;\n    }\n\n    @Override\n    public void displayDetails() {\n        System.out.println(\"Student - Name: \" + super.getName() + \", Age: \" + super.getAge() +\n                \", Student ID: \" + studentId);\n    }\n\n    public void study() {\n        System.out.println(\"Student is studying.\");\n    }\n}\n\nSubclass: Faculty\nclass Faculty extends Person {\n    private String department;\n\n    public Faculty(String name, int age, String department) {\n        super(name, age);\n        this.department = department;\n    }\n\n    @Override\n    public void displayDetails() {\n        System.out.println(\"Faculty - Name: \" + super.getName() + \", Age: \" + super.getAge() +\n                \", Department: \" + department);\n    }\n\n    public void teach() {\n        System.out.println(\"Faculty is teaching.\");\n    }\n}\n\npublic class PersonExample {\n    public static void main(String[] args) {\n        Student student = new Student(\"John\", 20, 123);\n        Faculty faculty = new Faculty(\"Dr. Smith\", 35, \"Computer Science\");\n\n        student.displayDetails();\n        student.greet();\n        student.study();\n\n        System.out.println();\n\n        faculty.displayDetails();\n        faculty.greet();\n        faculty.teach();\n    }\n}\n\n",
    "\n\nInterface\ninterface Printable {\n    void print();\n}\n\nClass implementing the interface\nclass Printer implements Printable {\n    @Override\n    public void print() {\n        System.out.println(\"Printing...\");\n    }\n}\n\npublic class InterfaceExample {\n    public static void main(String[] args) {\n        Creating an instance of the class implementing the interface\n        Printable printer = new Printer();\n\n        Using the interface method\n        printer.print();\n    }\n}\n\n\n",
    "\n\npublic class StringExample {\n    public static void main(String[] args) {\n        String s = \"Hello World!\";\n        System.out.println(\"Original string: \" + s);\n        System.out.println(\"Length: \" + s.length());\n        System.out.println(\"Uppercase: \" + s.toUpperCase());\n        System.out.println(\"Lowercase: \" + s.toLowerCase());\n        System.out.println(\"Substring from index 7: \" + s.substring(7));\n        System.out.println(\"Replace \'o\' with \'x\': \" + s.replace(\'o\', \'x\'));\n        System.out.println(\"Contains \'world\': \" + s.contains(\"world\"));\n        System.out.println(\"Starts with \'Hello\': \" + s.startsWith(\"Hello\"));\n        System.out.println(\"Index of \'o\': \" + s.indexOf(\'o\'));\n        System.out.println(\"Last index of \'o\': \" + s.lastIndexOf(\'o\'));\n        System.out.println(\"Ends with \'ld!\': \" + s.endsWith(\"ld!\"));\n        System.out.println(\"Character at index 4: \" + s.charAt(4));\n        System.out.println(\"Trimmed: \" + s.trim());\n    }\n}\n\n\n",
    "\n\npublic class StringBufferStringBuilderExample{\npublic static void main(String args[]){\nStringBuffer stringBuffer=new StringBuffer(\"hello\");\nstringBuffer.append(\" \").append(\"world\");\nSystem.out.println(\"StringBuffer result:\" + stringBuffer);\nStringBuilder stringBuilder=new StringBuilder();\nstringBuilder.append(\"is\").append(\"awesome\");\nSystem.out.println(\"StringBuilder result:\" + stringBuilder);\n}\n}\n\n",
    "\n\npublic class ExceptionExample {\n    public static void main(String[] args) {\n        int n = 26;\n        try {\n            int m = n / 0;\n        } catch (ArithmeticException e) {\n            System.out.println(\"Exception caught: \" + e);\n        } finally {\n            System.out.println(\"Any number cannot be divided by zero\");\n        }\n    }\n}\n\n\n",
    "\n\nCustom exception class\nclass NegativeNumberException extends Exception {\n    public NegativeNumberException(String message) {\n        super(message);\n    }\n}\n\nClass using the custom exception\npublic class CustomExceptionExample {\n    public static void main(String[] args) {\n        try {\n            int result = calculateSquare(5);\n            System.out.println(\"Square: \" + result);\n\n            result = calculateSquare(-3); This will throw NegativeNumberException\n            System.out.println(\"Square: \" + result); This line won\'t be executed\n        } catch (NegativeNumberException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n    }\n\n    Method that may throw the custom exception\n    private static int calculateSquare(int number) throws NegativeNumberException {\n        if (number < 0) {\n            Throw the custom exception if the number is negative\n            throw new NegativeNumberException(\"Negative numbers are not allowed.\");\n        }\n        return number * number;\n    }\n}\n\n\n",
    "\n\nimport java.io.*;\n\npublic class FileExample {\n    static FileInputStream fis;\n\n    public static void main(String[] args) {\n        try {\n            fis = new FileInputStream(\"example.txt\");\n\n            int data;\n            while ((data = fis.read()) != -1) {\n                System.out.print((char) data);\n            }\n\n            fis.close();\n        } catch (IOException io) {\n            System.out.println(\"Caught IOException: \" + io.getMessage());\n        }\n    }\n}\n\n\n",
    "\n\nimport java.io.*;\n\npublic class FileCopyExample {\n\n    public static void main(String[] args) {\n        try {\n            FileReader fr1 = new FileReader(\"source.txt\");\n            FileWriter fw2 = new FileWriter(\"destination.txt\");\n\n            int i;\n            while ((i = fr1.read()) != -1) {\n                fw2.write((char) i);\n            }\n\n            System.out.println(\"File copied\");\n\n            fr1.close();\n            fw2.close();\n        } catch (IOException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n    }\n}\n\n",
    "\n\nimport java.io.*;\n\nclass Test {\n    public static void main(String args[]) {\n        String path = \"sample.txt\";\n        try {\n            BufferedReader br = new BufferedReader(new FileReader(path));\n            int charCount = 0;\n            int lineCount = 0;\n            int wordCount = 0;\n            String line;\n\n            while ((line = br.readLine()) != null) {\n                charCount += line.length();\n                lineCount++;\n                String[] words = line.split(\"\\s+\");\n                wordCount += words.length;\n            }\n\n            br.close();\n\n            System.out.println(\"Number of characters: \" + charCount);\n            System.out.println(\"Number of words: \" + wordCount);\n            System.out.println(\"Number of lines: \" + lineCount);\n        } catch (IOException e) {\n            System.out.println(e);\n        }\n    }\n}\n",
    "\n\nimport java.util.StringTokenizer;\nimport java.io.StringReader;\nimport java.io.StringWriter;\n\npublic class StringExample {\n    public static void main(String[] args) {\n        try {\n            StringTokenizer st = new StringTokenizer(\"My name is Raj\");\n\n            while (st.hasMoreTokens()) {\n                System.out.println(st.nextToken());\n            }\n\n            String s = \"Hello World\";\n\n            StringReader reader = new StringReader(s);\n            int k = 0;\n\n            while ((k = reader.read()) != -1) {\n                System.out.print((char) k + \", \");\n            }\n\n            System.out.println(\"\\nIn Data is the StringWriter: \" + s);\n\n            StringWriter output = new StringWriter();\n            output.write(s);\n\n            System.out.println(\"In Data is the StringWriter: \" + output.toString());\n\n            output.close();\n        } catch (Exception e) {\n            System.out.println(\"Exception: \" + e.getMessage());\n        }\n    }\n}\n\n\n",
    "\n\npublic class SeasonExample {\n    public enum Season {\n        WINTER, SPRING, SUMMER, FALL;\n    }\n\n    public static void main(String[] args) {\n        int x = 26;\n\n        for (Season s : Season.values()) {\n            System.out.println(s);\n        }\n\n        assert x == 26 : \"Assertion failed\"; Assert that x is 26\n\n        System.out.println(x);\n    }\n}\n\n\n\n",
    "\n\npublic class AssertionExample {\n    public static void main(String[] args) {\n        int age = 26;\n\n        simple assertion to check if age is greater than or equal to 18\n        assert age >= 18 : \"Age must be 18 or older\";\n\n        Rest of the program\n        System.out.println(\"Program continues after the assertion check\");\n\n        More code...\n    }\n}\n\n",
    "\n\nclass MyThread implements Runnable {\n\n    public void run() {\n        System.out.println(\"Hello\");\n        System.out.println(\"DS\");\n    }\n\n    public static void main(String[] args) {\n        MyThread obj = new MyThread();\n        Thread t = new Thread(obj);\n        t.start();\n    }\n}\n\n\n",
    "\n\nclass MyThread extends Thread {\n    public void run() {\n        System.out.println(\"run method\");\n        System.out.println(\"run method priority: \" + Thread.currentThread().getPriority());\n        Thread.currentThread().setPriority(4);\n        System.out.println(\"run method priority after setting: \" + Thread.currentThread().getPriority());\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"main method\");\n        System.out.println(\"main method priority before setting: \" + Thread.currentThread().getPriority());\n\n        Thread.currentThread().setPriority(9);\n\n        System.out.println(\"main method priority after setting: \" + Thread.currentThread().getPriority());\n    }\n}\n",
    "\n\nimport java.util.LinkedList;\n\nclass SharedResource {\n    private LinkedList buffer = new LinkedList<>();\n    private int capacity = 2;\n\n    public void produce() throws InterruptedException {\n        synchronized (this) {\n            while (buffer.size() == capacity) {\n                wait();\n            }\n\n            int item = (int) (Math.random() * 100);\n            System.out.println(\"Produced: \" + item);\n            buffer.add(item);\n\n            notify();\n        }\n    }\n\n    public void consume() throws InterruptedException {\n        synchronized (this) {\n            while (buffer.isEmpty()) {\n                wait();\n            }\n\n            int item = buffer.removeFirst();\n            System.out.println(\"Consumed: \" + item);\n\n            notify();\n        }\n    }\n}\n\nclass Producer extends Thread {\n    private SharedResource sharedResource;\n\n    public Producer(SharedResource sharedResource) {\n        this.sharedResource = sharedResource;\n    }\n\n    @Override\n    public void run() {\n        try {\n            while (true) {\n                sharedResource.produce();\n                Thread.sleep(1000);\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\nclass Consumer extends Thread {\n    private SharedResource sharedResource;\n\n    public Consumer(SharedResource sharedResource) {\n        this.sharedResource = sharedResource;\n    }\n\n    @Override\n    public void run() {\n        try {\n            while (true) {\n                sharedResource.consume();\n                Thread.sleep(1000);\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\npublic class ProducerConsumerExample {\n    public static void main(String[] args) {\n        SharedResource sharedResource = new SharedResource();\n\n        Producer producer = new Producer(sharedResource);\n        Consumer consumer = new Consumer(sharedResource);\n\n        producer.start();\n        consumer.start();\n    }\n}\n"
];

answers.Add("JAVAanswersForAimlACse", JAVAanswersForAimlACse);


var a;
var b;

WScript.StdOut.WriteLine("Enter Password:");
pass = WScript.StdIn.ReadLine();
if (pass!="yar")
    WScript.Quit();

while (true) {
    WScript.StdOut.WriteLine("----- Subjects -----");
    a = (new VBArray(subjects.Keys())).toArray();
    b = (new VBArray(subjects.Items())).toArray();
    for (var subjectIndex = 0; subjectIndex < subjects.Count; subjectIndex++) {
        WScript.StdOut.WriteLine(subjectIndex + 1 + ". " + a[subjectIndex]);
    }

    var selectedSubjectIndex = WScript.StdIn.ReadLine();

    if (selectedSubjectIndex.toLowerCase() === "exit") {
        WScript.Quit();
    }

    if (!isNaN(selectedSubjectIndex)) {
        selectedSubjectIndex = parseInt(selectedSubjectIndex, 10);
        if (selectedSubjectIndex >= 1 && selectedSubjectIndex <= subjects.Count) {
            var selectedSubject = a[selectedSubjectIndex - 1];
            DisplayQuestions(selectedSubject);
        } else {
            WScript.StdOut.WriteLine("Invalid subject number. Please try again.");
        }
    } else {
        WScript.StdOut.WriteLine("Invalid input. Please enter a numeric subject number or 'exit' to end.");
    }
}

function DisplayQuestions(subject) {
    do {
        var questionsArray;
        var answersArray;

        switch (subject) {
            
            case "JAVAForAimlACse":
                questionsArray = subjects.Item("JAVAForAimlACse");
                answersArray = answers.Item("JAVAanswersForAimlACse");
                break;
        }

        WScript.StdOut.WriteLine("----- " + subject + " Questions -----");
        for (var i = 0; i < questionsArray.length; i++) {
            WScript.StdOut.WriteLine(i + 1 + ". " + questionsArray[i]);
        }

        var userInput = WScript.StdIn.ReadLine();
        if (userInput.toLowerCase() === "exit") {
            break;
        }

        if (!isNaN(userInput)) {
            var questionNumber = parseInt(userInput, 10);

            if (questionNumber >= 1 && questionNumber <= questionsArray.length) {
                WScript.StdOut.WriteLine("Answer: \n\n----------------------------------------------- \n\n" + answersArray[questionNumber - 1] + "\n\n------------------------------------------- \n");
                WScript.StdIn.ReadLine();
            } else {
                WScript.StdOut.WriteLine("Invalid question number. Please try again.");
            }
        } else {
            WScript.StdOut.WriteLine("Invalid input. Please enter a numeric question number or 'exit' to go back.");
        }
    } while (true);
}